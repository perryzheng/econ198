head	1.1;
access;
symbols;
locks; strict;
comment	@# @;
expand	@b@;


1.1
date	2010.04.10.06.13.52;	author idw3;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@
% ARITHMETICALLY CALCULATED PERIOD RETURNS, compounded periodically 

%***portweight***: a 1 by numOfFunds row vector
%***onesimMoReturns***: a numMonths by 
function y = calc_rebalance_cashflows_01(portweight, onesimMoReturns, rebalancemonth)
    % weights are ROW vectors
	proceed = 1;

	for i=1:size(portweight) 
		if(portweight(i)<0 && portweight(i)>1) 
			proceed = 0
		end
	end

	%if proceed == 1  
			samplemonths = size(onesimMoReturns, 1);    
			NumofFunds = size(onesimMoReturns, 2);

			startmoney = 1;
			
			numOfTrials = floor(samplemonths/rebalancemonth);
			balancedportValue = zeros(numOfTrials+ 1, NumofFunds);    
			balancedportValue(1, :) = startmoney.*portweight;
			port_value_at_each_reb = zeros(numOfTrials,1);
			
			returnsplusone = onesimMoReturns;
			for i = 1:numOfTrials
				periodreturn = sum(returnsplusone((i-1)*rebalancemonth +1 : i*rebalancemonth, :), 1);
				
				balancedportValue(i+1, :) = balancedportValue(i, :) .* (periodreturn+1);
				periodportVal = sum(balancedportValue(i+1, :), 2);
				port_value_at_each_reb(i,1) = periodportVal; %port_value_at_each_reb is the portfolio value vector after each rebalancing period
				
				balancedportValue(i+1, :) = periodportVal * portweight; 
			end
			
			finalvalues = balancedportValue(numOfTrials+1, :);
			finalportvalue = sum(finalvalues);
			
			y = {finalvalues, finalportvalue, port_value_at_each_reb};
	%else
		% 'Did not proceed'
	%end

	
end


    
    %{
    % weights must be a column vector
    if size(portweight, 2) > size(portweight, 1)
        portweight = portweight';
    end
    %}
@
