head	1.2;
access;
symbols;
locks; strict;
comment	@// @;
expand	@b@;


1.2
date	2009.11.19.21.56.37;	author idw3;	state dead;
branches;
next	1.1;

1.1
date	2009.11.02.23.08.14;	author xz27;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@
% ARITHMETICALLY CALCULATED PERIOD RETURNS, compounded periodically 

function y = calc_rebalance_cashflows_01(portweight, onesimMoReturns, rebalancemonth)

    % weights are ROW vectors

    samplemonths = size(onesimMoReturns, 1);    
    NumofFunds = size(onesimMoReturns, 2);

    startmoney = 1;
    
    balancedportValue = zeros(rebalancemonth + 1, NumofFunds);    
    balancedportValue(1, :) = startmoney.*portweight;
	port_value_at_each_reb = zeros(samplemonths/rebalancemonth,1);
    
    returnsplusone = onesimMoReturns + 1;
    
    for i = 1:rebalancemonth
        periodreturn = sum(returnsplusone((i-1)*rebalancemonth + 1 : i*rebalancemonth, :), 1);
        
        balancedportValue(i+1, :) = balancedportValue(i, :) .* (1+periodreturn);
        periodportVal = sum(balancedportValue(i+1, :), 2);
		port_value_at_each_reb(i,1) = periodportVal; %port_value_at_each_reb is the portfolio value vector after each rebalancing period
        
        balancedportValue(i+1, :) = periodportVal .* portweight; 
    end
    
    finalvalues = balancedportValue(rebalancemonth+1, :);
    finalportvalue = sum(finalvalues);
    
    y = {finalvalues, finalportvalue, port_value_at_each_reb};

end


    
    %{
    % weights must be a column vector
    if size(portweight, 2) > size(portweight, 1)
        portweight = portweight';
    end
    %}
@


1.1
log
@*** empty log message ***
@
text
@@

