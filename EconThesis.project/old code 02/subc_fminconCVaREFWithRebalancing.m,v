head	1.1;
access;
symbols;
locks; strict;
comment	@// @;
expand	@b@;


1.1
date	2010.04.10.14.13.45;	author idw3;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@
classdef subc_fminconCVaREFWithRebalancing < class_efficientfrontiers
    %***NumPorts***: number of portfolios along the efficient frontier (how many
    %dots, typically 24), each dot is a specific set of weights of
    %different funds (w1, w2, w3, ..., wn) and w1+...+wn = 1; it is a
    %specific allocation of the funds
    %***portSDs***: Standard deviation of each dot, NumPorts x 1 column
    %vector
    %***portReturns***: returns of each dot, NumPorts x 1 column vector
    %***portWts***: the specific weights of funds of each of the NumPorts
    %portfolios, a NumPorts x n matrix (where n as usual, stands for number
    %of funds), sum of each row sum up to 1 
    %***sharpeRatio***: sharpe ratio of each portfolio, NumPorts x 1 column
    %vector; slope of the line from the portfolio to the risk free rate on
    %the y-axis (or the returns axis). slope of two points, we want to find the
    %maximum tangent
    %***optSharpePt***: scalar that tells which portfolio has the maximum
    %sharpRatio 
    properties
        NumPorts
        portCVaRs
        portReturns       
        portWts        
        
        sharpeRatio
        optSharpePt
    end
    
    methods
        function fminconcvar = subc_fminconCVaREFWithRebalancing(samplemonths, NumPorts,...
                startweights, returnconstraints, RiskFreeRate, compound_dummy)
            
            global rebalanceMonth
            
            fmincontestout = fmincon_test(fminconcvar, samplemonths, NumPorts, startweights, returnconstraints, compound_dummy, rebalanceMonth);
            
            fminconcvar.portCVaRs = fmincontestout{3};
            fminconcvar.portReturns = fmincontestout{2};
            fminconcvar.portWts = fmincontestout{1};

            monthlyarithriskfreerate = RiskFreeRate/12;
            fminconcvar.sharpeRatio = (fminconcvar.portReturns - monthlyarithriskfreerate) ./ fminconcvar.portCVaRs;

            maxsharpe = max(fminconcvar.sharpeRatio);

            fminconcvar.optSharpePt = find(fminconcvar.sharpeRatio == maxsharpe);
        end

        function y = fmincon_test(obj, samplemonths, numEFportfolios, PortWts, portreturns,compound_dummy, rebalanceMonth)
            global glob_tcopdrawReturns; %got from histSims.tcopdrawRawReturns

            numPeriods = floor(samplemonths/rebalanceMonth);
            
            for j = 1:numEFportfolios
                ['Calculating Portfolio #']
                [j]    
                fminconoutput = fmincon_single(obj, portreturns(j, 1), PortWts(j, :),compound_dummy);
                fminconportWt(j, :) = fminconoutput{1};
                %***IMPORTANT***: the line below does not work. We should
                %reinput the weights back into the
                %CVaRConstraintWithRebalancing (or create a new file) to
                %calculate the correct returns. 
                %****EDITED***: Now changed to run the weight with
                %rebalancing to get correct return 
                minWeights = fminconoutput{1}
                empiricalReturn = calcPortReturn(minWeights, compound_dummy);
                %tempfminconfinalvalue = portweightfinalvalue(tcopfinalfundvalue, fminconportWt(i, :)');
                % ARITHMETIC CVaR MONTHLY!!  (loss per mo)
                fminconmoCVaR(j, 1) = fminconoutput{2}

                fminconMoRet(j, 1) = empiricalReturn
                %'should be'
                %portreturns(i, 1)
                %Question: Is this really the right return???? Should we
                %really get it from tcopfinalfundvalue? 
            end %end of for statement
            y = {fminconportWt fminconMoRet fminconmoCVaR};
            
            %---nested function -- 
            function y = calcPortReturn(portWeights, compound_dummy) 
                numOfMonths = size(glob_tcopdrawReturns,1);
                numOfFunds = size(glob_tcopdrawReturns,2);
                numOfSims = size(glob_tcopdrawReturns,3);

                numPeriods = floor(numOfMonths/rebalanceMonth);
                simReturnData = zeros(numOfSims, numOfFunds);

                for i=1:numOfSims
                    oneSimReturns = glob_tcopdrawReturns(:,:,i);
                    y = runWeightWithRebalancing(portWeights,oneSimReturns,rebalanceMonth,compound_dummy);
                    finalValues = y{1}; % a row vector of the final values
                    simReturnData(i,:) = finalValues;
                end

                %Now need to convert each return in simReturnData to a monthly return rate
                %mean outputs the average of the columns the result is a 1 by numFund matrix
                %sum simply sums them up
                finalValue = sum(mean(simReturnData,1));
                %From the final value, we deduce the monthly return
                if compound_dummy == 1 
                    empiricalReturn = (finalValue^(1/numPeriods) - 1)/rebalanceMonth; %compounding
                else
                    empiricalReturn = (finalValue - 1) / numOfMonths; %arithmetic
                end 
                y = empiricalReturn;
                
            end %end of calcPortfolioReturn
                
            %-- nested function -- 
            function y = runWeightWithRebalancing(portWeight, oneSimReturns, rebalanceMonth, compound_dummy)
                % Convert would convert portWeight to row vector 
                sampleMonths = size(oneSimReturns,1);

                if size(portWeight, 2) == 1
                    portWeight = portWeight';
                end
                
                proceed = 1;
                if proceed == 1  
                        samplemonths = size(oneSimReturns, 1);    
                        numOfFunds = size(oneSimReturns, 2);

                        startMoney = 1;

                        numOfTrials = floor(sampleMonths/rebalanceMonth);
                        balancedportValue = zeros(numOfTrials+ 1, numOfFunds);    
                        %Start the fortfolio by putting the startMoney among the
                        %asset classes according to portfolio weights
                        balancedportValue(1, :) = startMoney.*portWeight;
                        port_value_at_each_reb = zeros(numOfTrials,1);

                        returnPlusOne = oneSimReturns;
                        %At after each period we rebalance and redistribute the period
                        %portfolio value by the portWeight row vector and we store that
                        %in balancedportValue
                        for i = 1:numOfTrials
                            periodreturn = sum(returnPlusOne((i-1)*rebalanceMonth +1 : i*rebalanceMonth, :), 1);

                            if compound_dummy == 1
                                balancedportValue(i+1, :) = balancedportValue(i, :) .* (periodreturn+1); % compounds instead of arithmetic
                            else
                                balancedportValue(i+1,:) = balancedportValue(i,:) + periodreturn; %arithmetic
                            end
                            periodportVal = sum(balancedportValue(i+1, :), 2);
                            port_value_at_each_reb(i,1) = periodportVal; %port_value_at_each_reb is the portfolio value at the end of each rebalancing period

                            balancedportValue(i+1, :) = periodportVal * portWeight; 
                        end

                        finalvalues = balancedportValue(numOfTrials+1, :);
                        finalportvalue = sum(finalvalues);
                        y = {finalvalues, finalportvalue, port_value_at_each_reb};
                end
            end %end of 
        end

        % ***tcopfinalfundvalue***: 1 by n by numOfSimulations matrix
        % Contains final value of each asset class for numOfSimulations
        % Has already added one added to it
        % ***returnconstraint***: numOfPortfolios by 1 volumn vector
        % Contains the return for each portfolio, gotten from
        % tcopNormMeanVarEF.portReturns from the aaa file. 
        % ***starweights***: numOfPortfolios by 1 volumn vector
        % Contains the optimal weights for the mean variance framework
        % Come from tcopNormWtsCVaREF.portWts in aaa file
        function y = fmincon_single(obj, returnconstraint, startweights, compound_dummy)
            tic
            %take each portreturn level, we return the weights that would minimize
            %CVaR, with the constraint that rebalancing at the end of each end
            %period that the final return annually should be at least that return
            %level.
            %This is done for a SINGLE weight
            % global glob_EFconstraints;
            global glob_returnconstraint;
            global globalEFconstraints;
            global glob_tcopdrawReturns;
            
            compound = compound_dummy; %this variable will be used by nested functions 
            glob_returnconstraint = returnconstraint;

            NumofFunds = size(startweights, 2);  
            
            %startweights = (1/NumofFunds)*ones(1, NumofFunds); % what happens if start weights are not the same as historical weights?
            
            % ConSet = glob_EFconstraints.ConSet;
            ConSet = globalEFconstraints.ConSet;
            A = ConSet(:, 1:NumofFunds);
            b = ConSet(:, (NumofFunds + 1));

            %{
            lb = zeros(1,numoffunds);
            ub = ones(1,numoffunds);
            aeq = ones(1,numoffunds);
            beq = 1; 
            %}

            global glob_fminconoptions
            options = glob_fminconoptions; % options for fmincon declared in aaa_
            
            %The idea here is for each return level r_0 apply vecotr w to
            %each of 5000 simulations and calculate the return. At the end
            %we have a vector of 5000 final returns, calculates CVaR from
            %these 5000 returns. Worst of the 5% of 5000 250 returns
            %Calculate that CVaR call it CVaR bar
            global glob_pr;
        
            global rebalanceMonth % want to be able to specify which month we rebalance

            [weights,lowest_CVaR, exitflag] = fmincon(@@calcCVaRWithRebalancing, startweights, A, b, ...
            [], [], [], [], @@CVaRConstraintWithRebalancing, options);
            toc
            y = {weights, lowest_CVaR};
            %result is in the form of {weights, lowest_CVaR};
            
            %-------------------- a list of nested funtions -------------
            % ----- nested function ---- 
            function y = calcCVaRWithRebalancing(portWeights) 
                %***glob_tcopdrawReturns***: a m by n by numGDPDraws matrix
                % The idea here is to use calcVaRWithRelancingHelper for each sheet
                % Each sheet represents a m by n matrix, we calculate the final
                % portfolio value of the sheet

                %May need to change this to simulation returns

                numOfMonths = size(glob_tcopdrawReturns,1);
                numOfFunds = size(glob_tcopdrawReturns,2);
                numOfSims = size(glob_tcopdrawReturns,3);
                simReturnData = zeros(numOfSims, 1);


                numPeriods = floor(numOfMonths/rebalanceMonth);

                for i=1:numOfSims
                    oneSimReturns = glob_tcopdrawReturns(:,:,i);
                    y = calcCVaRWithRebalancingHelper(portWeights,oneSimReturns,rebalanceMonth);
                    finalValue = y{2}; % a scalar indicating final portfolio value

                    simReturnData(i,1) = finalValue;
                end

                lowp = 0.05;
                % attempt to vectorize, each row is a different weight, calcCVaR gives
                % results in each column
                simReturnData;
                if compound == 1
                    simReturnData = (simReturnData.^(1/numPeriods) - 1)/rebalanceMonth; %compounding
                else
                    simReturnData = (simReturnData - 1) ./ numOfMonths; %arithmetic    
                end
                
                y = - (calcCVar95_01(simReturnData, lowp)'); 
                %***Important***: Check if it makes any difference if we do 
                % the conversion of simReturnData from
                % final value to montly return AFTER we put it in calcCVaR95_01 first
                % That is, does it make a difference if we switch the above two lines
                % of code? (My hypothesis is no but we need to check)
            end

            %----- nested function-------
            function y = calcCVaRWithRebalancingHelper(portWeight, oneSimReturns, rebalanceMonth)
                % Convert would convert portWeight to column vector 
                sampleMonths = size(oneSimReturns,1);

                if size(portWeight, 2) == 1
                    %Assume the portWeight is a vector. Then if the number of columns 
                    %is one, which means it's a column vector, then make it a row
                    %vector
                    portWeight = portWeight';
                end

                proceed = 1;

                %for i=1:size(portWeight) 
                %	if(portWeight(i)<0 || portWeight(i)>1) 
                %		proceed = 0
                %	end
                %end

                if proceed == 1  
                        samplemonths = size(oneSimReturns, 1);    
                        numOfFunds = size(oneSimReturns, 2);

                        startMoney = 1;

                        numOfTrials = floor(sampleMonths/rebalanceMonth);
                        balancedportValue = zeros(numOfTrials+ 1, numOfFunds);    
                        %Start the fortfolio by putting the startMoney among the
                        %asset classes according to portfolio weights
                        balancedportValue(1, :) = startMoney.*portWeight;
                        port_value_at_each_reb = zeros(numOfTrials,1);

                        returnPlusOne = oneSimReturns;
                        %At after each period we rebalance and redistribute the period
                        %portfolio value by the portWeight row vector and we store that
                        %in balancedportValue
                        for i = 1:numOfTrials
                            periodreturn = sum(returnPlusOne((i-1)*rebalanceMonth +1 : i*rebalanceMonth, :), 1);

                            if compound == 1
                                balancedportValue(i+1, :) = balancedportValue(i, :) .* (periodreturn + 1); % compounds instead of arithmetic
                            else
                                balancedportValue(i+1,:) = balancedportValue(i,:) + periodreturn; %arithmetic
                            end
                            periodportVal = sum(balancedportValue(i+1, :), 2);
                            port_value_at_each_reb(i,1) = periodportVal; %port_value_at_each_reb is the portfolio value at the end of each rebalancing period

                            balancedportValue(i+1, :) = periodportVal * portWeight; 
                        end

                        finalvalues = balancedportValue(numOfTrials+1, :);
                        finalportvalue = sum(finalvalues);
                        y = {finalvalues, finalportvalue, port_value_at_each_reb};
                end
            end %end of calcCVaRWithRebalancingHelper

            function [c,ceq] = CVaRConstraintWithRebalancing(portWeights) 
                %global glob_returnconstraint
                %global glob_pr; %global portfolio return 
                %global glob_tcopdrawReturns;

                numOfMonths = size(glob_tcopdrawReturns,1);
                numOfFunds = size(glob_tcopdrawReturns,2);
                numOfSims = size(glob_tcopdrawReturns,3);

                numPeriods = floor(numOfMonths/rebalanceMonth);
                simReturnData = zeros(numOfSims, numOfFunds);

                for i=1:numOfSims
                    oneSimReturns = glob_tcopdrawReturns(:,:,i);
                    y = CVaRConstraintWithRebalancingHelper(portWeights,oneSimReturns,rebalanceMonth);
                    finalValues = y{1}; % a row vector of the final values
                    simReturnData(i,:) = finalValues;
                end

                %Now need to convert each return in simReturnData to a monthly return
                %rate
                %mean outputs the average of the columns the result is a 1 by numFund matrix
                %sum simply sums them up
                finalValue = sum(mean(simReturnData,1));
                %From the final value, we deduce the monthly return
                if compound == 1 
                    empiricalReturn = (finalValue^(1/numPeriods) - 1)/rebalanceMonth; %compounding
                else
                    empiricalReturn = (finalValue - 1) / numOfMonths; %arithmetic
                end 
                c = [];
                % ceq = (empiricalReturn - glob_pr);
                ceq = (empiricalReturn - glob_returnconstraint);
            end

            %----- nested function ---- 
            function y = CVaRConstraintWithRebalancingHelper(portWeight, oneSimReturns, rebalanceMonth)
                % Convert would convert portWeight to column vector 

                if size(portWeight, 2) == 1
                    %Assume the portWeight is a vector. Then if the number of columns 
                    %is one, which means it's a column vector, then make it a row
                    %vector
                    portWeight = portWeight';
                end

                proceed = 1;

                %for i=1:size(portWeight) 
                %	if(portWeight(i)<0 || portWeight(i)>1) 
                %		proceed = 0
                %	end
                %end

                if proceed == 1  
                        samplemonths = size(oneSimReturns, 1);    
                        numOfFunds = size(oneSimReturns, 2);

                        startMoney = 1;

                        numOfTrials = floor(samplemonths/rebalanceMonth);
                        balancedportValue = zeros(numOfTrials+ 1, numOfFunds);    
                        %Start the fortfolio by putting the startMoney among the
                        %asset classes according to portfolio weights
                        balancedportValue(1, :) = startMoney.*portWeight;
                        port_value_at_each_reb = zeros(numOfTrials,1);

                        returnPlusOne = oneSimReturns;
                        %At after each period we rebalance and redistribute the period
                        %portfolio value by the portWeight row vector and we store that
                        %in balancedportValue
                        for i = 1:numOfTrials
                            periodreturn = sum(returnPlusOne((i-1)*rebalanceMonth +1 : i*rebalanceMonth, :), 1);

                            if compound == 1 
                                balancedportValue(i+1, :) = balancedportValue(i, :) .* (periodreturn+1); % compounds instead of arithmetic
                            else 
                                balancedportValue(i+1,:) = balancedportValue(i,:) + periodreturn; %arithmetic
                            end
                            periodportVal = sum(balancedportValue(i+1, :), 2);
                            port_value_at_each_reb(i,1) = periodportVal; %port_value_at_each_reb is the portfolio value at the end of each rebalancing period

                            balancedportValue(i+1, :) = periodportVal * portWeight; 
                        end

                        finalvalues = balancedportValue(numOfTrials+1, :);
                        finalportvalue = sum(finalvalues);
                        y = {finalvalues, finalportvalue, port_value_at_each_reb};
                end
            end %end of CVaRConstraintWithRebalancingHelper
            
            
        end %end of fmincon_single  
    end
end
@
