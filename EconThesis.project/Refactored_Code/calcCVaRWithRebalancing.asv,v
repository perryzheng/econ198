head	1.4;
access;
symbols;
locks; strict;
comment	@# @;
expand	@b@;


1.4
date	2010.02.07.23.20.16;	author xz27;	state Exp;
branches;
next	1.3;

1.3
date	2010.02.03.18.23.06;	author xz27;	state Exp;
branches;
next	1.2;

1.2
date	2010.02.01.22.49.45;	author xz27;	state Exp;
branches;
next	1.1;

1.1
date	2010.02.01.04.18.13;	author xz27;	state Exp;
branches;
next	;


desc
@@


1.4
log
@*** empty log message ***
@
text
@function y = calcCVaRWithRebalancing(portWeights) 
    %***glob_tcopdrawReturns***: a m by n by numGDPDraws matrix
    % The idea here is to use calcVaRWithRelancingHelper for each sheet
    % Each sheet represents a m by n matrix, we calculate the final
    % portfolio value of the sheet
    
    %May need to change this to simulation returns
    global glob_tcopdrawReturns;
    
    numOfMonths = size(glob_tcopdrawReturns,1);
    numOfFunds = size(glob_tcopdrawReturns,2);
    numOfSims = size(glob_tcopdrawReturns,3);
    simReturnData = zeros(numOfSims, 1);
    
	rebalanceMonth = 12;
    numPeriods = floor(numOfMonths/rebalanceMonth);

    
    for i=1:numOfSims
        oneSimReturns = glob_tcopdrawReturns(:,:,i);
        y = calcCVaRWithRebalancingHelper(portWeights,oneSimReturns,rebalanceMonth);
        finalValue = y{2}; % a scalar indicating final portfolio value
        
        simReturnData(i,1) = finalValue;
    end
    
    lowp = 0.05;
    % attempt to vectorize, each row is a different weight, calcCVaR gives
    % results in each column
    simReturnData;
    simReturnData = (simReturnData.^(1/numPeriods) - 1)/rebalanceMonth; 
    y = - (calcCVar95_01(simReturnData, lowp)'); 
    %***Important***: Check if it makes any difference if we do 
    % the conversion of simReturnData from
    % final value to montly return AFTER we put it in calcCVaR95_01 first
    % That is, does it make a difference if we switch the above two lines
    % of code? (My hypothesis is no but we need to check)
end

% ARITHMETICALLY CALCULATED PERIOD RETURNS, compounded periodically 

%***portWeight***: a 1 by numOfFunds row vector, indicating weights of that
%portfolio 
%***oneSimReturns***: a numMonths by numOfFunds matrix
%***rebalanceMonth***: a fixed constant indicating how many months one
%should rebalance Output: 
function y = calcCVaRWithRebalancingHelper(portWeight, oneSimReturns, rebalanceMonth)
    % Convert would convert portWeight to column vector 
    sampleMonths = size(oneSimReturns,1);
    
    if size(portWeight, 2) == 1
        %Assume the portWeight is a vector. Then if the number of columns 
        %is one, which means it's a column vector, then make it a row
        %vector
        portWeight = portWeight';
    end
    
	proceed = 1;

	for i=1:size(portWeight) 
		if(portWeight(i)<0 || portWeight(i)>1) 
			proceed = 0
		end
    end
    
	if proceed == 1  
			samplemonths = size(oneSimReturns, 1);    
			numOfFunds = size(oneSimReturns, 2);
            compounding = 1 %If compounding==1, then compound, otherwise, use arithmetic
			startMoney = 1;
			
			numOfTrials = floor(sampleMonths/rebalanceMonth);
			balancedportValue = zeros(numOfTrials+ 1, numOfFunds);    
            %Start the fortfolio by putting the startMoney among the
            %asset classes according to portfolio weights
			balancedportValue(1, :) = startMoney.*portWeight;
			port_value_at_each_reb = zeros(numOfTrials,1);
			
			returnPlusOne = oneSimReturns;
            %At after each period we rebalance and redistribute the period
            %portfolio value by the portWeight row vector and we store that
            %in balancedportValue
			for i = 1:numOfTrials
				periodreturn = sum(returnPlusOne((i-1)*rebalanceMonth +1 : i*rebalanceMonth, :), 1);
				
				%balancedportValue(i+1, :) = balancedportValue(i, :) .* (periodreturn+1); % compounds instead of arithmetic
                balanceportValue(i+1,:) = balancedportValue(i,:)
				periodportVal = sum(balancedportValue(i+1, :), 2);
				port_value_at_each_reb(i,1) = periodportVal; %port_value_at_each_reb is the portfolio value at the end of each rebalancing period
				
				balancedportValue(i+1, :) = periodportVal * portWeight; 
			end
			
			finalvalues = balancedportValue(numOfTrials+1, :);
			finalportvalue = sum(finalvalues);
            y = {finalvalues, finalportvalue, port_value_at_each_reb};
    end
end@


1.3
log
@*** empty log message ***
@
text
@d10 1
d16 2
d22 1
a22 1
        finalValue = y{2}; % a scalar indicating final portfolio valule
d31 7
a37 1
    y = - (calcCVar95_01(simReturnData, lowp)' - 1);
d61 1
a61 1
		if(portWeight(i)<0 && portWeight(i)>1) 
d69 1
a69 1

d86 2
a87 1
				balancedportValue(i+1, :) = balancedportValue(i, :) .* (periodreturn+1);
@


1.2
log
@More rebalancing for CVaR
@
text
@a9 1
    numOfMonths = size(glob_tcopdrawReturns,1);
d12 1
a12 1
    simReturnData = zeros(numOfSims, numOfFunds);
a16 1
        tic
d19 3
a21 3
        finalValues = y{1}; % a vector of the final values
        simReturnData(i,:) = finalValues;
        toc
d27 2
a28 1
    y = - (calcCVar95_01(simReturnData, lowp)' - 1);     
d40 1
d61 1
a61 1
			startmoney = 1;
d63 1
a63 1
			numOfTrials = floor(samplemonths/rebalanceMonth);
d65 3
a67 2
            %Start the forti
			balancedportValue(1, :) = startmoney.*portWeight;
d70 1
a70 1
			returnsplusone = oneSimReturns;
d75 1
a75 1
				periodreturn = sum(returnsplusone((i-1)*rebalanceMonth +1 : i*rebalanceMonth, :), 1);
a87 1
	
@


1.1
log
@rebalancing with CVaR
@
text
@d2 5
d8 1
a8 2
    global glob_hist_returns;
    hist_returns = glob_hist_returns;
d10 15
a24 3
    numOfMonths = size(hist_returns,1);
	rebalancemonth = 12;
	result = calcCVaRWithRebalancingHelper(portWeights,hist_returns, rebalancemonth);
d29 1
a29 6
    blad = - (calcCVar95_01(portfinalvalue, lowp)' - 1); 
    % y = - (calcCVar95_01(portfinalvalue, lowp) - 1);
    
    %Take the finalvalues and calculate the variance of that
    %y = var(result{1}/numOfMonths);
    y = var(result{3});
d34 1
a34 1
%***portweight***: a 1 by numOfFunds row vector, indicating weights of that
d36 2
a37 2
%***onesimMoReturns***: a numMonths by NumofFunds matrix
%***rebalancemonth***: a fixed constant indicating how many months one
d39 2
a40 2
function y = calcCVaRWithRebalancingHelper(portweight, onesimMoReturns, rebalancemonth)
    % Convert column vector 
d42 2
a43 2
    if size(portweight, 2) == 1
        %Assume the portweight is a vector. Then if the number of columns 
d46 1
a46 1
        portweight = portweight';
a47 1
    %portweight_in_nv = portweight
d51 2
a52 2
	for i=1:size(portweight) 
		if(portweight(i)<0 && portweight(i)>1) 
d58 2
a59 2
			samplemonths = size(onesimMoReturns, 1);    
			NumofFunds = size(onesimMoReturns, 2);
d63 4
a66 3
			numOfTrials = floor(samplemonths/rebalancemonth);
			balancedportValue = zeros(numOfTrials+ 1, NumofFunds);    
			balancedportValue(1, :) = startmoney.*portweight;
d69 1
a69 1
			returnsplusone = onesimMoReturns;
d71 1
a71 1
            %portfolio value by the portweight row vector and we store that
d74 1
a74 1
				periodreturn = sum(returnsplusone((i-1)*rebalancemonth +1 : i*rebalancemonth, :), 1);
d80 1
a80 1
				balancedportValue(i+1, :) = periodportVal * portweight; 
@

