head	1.59;
access;
symbols;
locks; strict;
comment	@// @;
expand	@b@;


1.59
date	2010.04.18.23.18.58;	author idw3;	state Exp;
branches;
next	1.58;

1.58
date	2010.04.11.19.52.29;	author idw3;	state Exp;
branches;
next	1.57;

1.57
date	2010.04.10.18.09.55;	author xz27;	state Exp;
branches;
next	1.56;

1.56
date	2010.04.10.16.29.25;	author idw3;	state Exp;
branches;
next	1.55;

1.55
date	2010.04.10.15.45.01;	author xz27;	state Exp;
branches;
next	1.54;

1.54
date	2010.04.10.14.52.54;	author idw3;	state Exp;
branches;
next	1.53;

1.53
date	2010.04.10.14.13.21;	author idw3;	state Exp;
branches;
next	1.52;

1.52
date	2010.04.09.19.04.23;	author idw3;	state Exp;
branches;
next	1.51;

1.51
date	2010.03.28.16.35.46;	author idw3;	state Exp;
branches;
next	1.50;

1.50
date	2010.03.24.18.40.26;	author idw3;	state Exp;
branches;
next	1.49;

1.49
date	2010.03.24.05.27.54;	author idw3;	state Exp;
branches;
next	1.48;

1.48
date	2010.03.03.16.34.21;	author idw3;	state Exp;
branches;
next	1.47;

1.47
date	2010.03.03.07.36.21;	author idw3;	state Exp;
branches;
next	1.46;

1.46
date	2010.02.24.06.13.43;	author idw3;	state Exp;
branches;
next	1.45;

1.45
date	2010.02.24.05.04.56;	author idw3;	state Exp;
branches;
next	1.44;

1.44
date	2010.02.22.01.15.42;	author xz27;	state Exp;
branches;
next	1.43;

1.43
date	2010.02.22.00.55.11;	author xz27;	state Exp;
branches;
next	1.42;

1.42
date	2010.02.22.00.00.19;	author xz27;	state Exp;
branches;
next	1.41;

1.41
date	2010.02.21.23.36.31;	author xz27;	state Exp;
branches;
next	1.40;

1.40
date	2010.02.21.21.54.10;	author idw3;	state Exp;
branches;
next	1.39;

1.39
date	2010.02.17.22.47.34;	author idw3;	state Exp;
branches;
next	1.38;

1.38
date	2010.02.17.18.27.26;	author idw3;	state Exp;
branches;
next	1.37;

1.37
date	2010.02.17.17.34.30;	author idw3;	state Exp;
branches;
next	1.36;

1.36
date	2010.02.17.06.46.09;	author idw3;	state Exp;
branches;
next	1.35;

1.35
date	2010.02.17.06.44.47;	author idw3;	state Exp;
branches;
next	1.34;

1.34
date	2010.02.17.06.34.49;	author xz27;	state Exp;
branches;
next	1.33;

1.33
date	2010.02.17.06.30.02;	author xz27;	state Exp;
branches;
next	1.32;

1.32
date	2010.02.17.05.53.39;	author idw3;	state Exp;
branches;
next	1.31;

1.31
date	2010.02.17.02.56.48;	author xz27;	state Exp;
branches;
next	1.30;

1.30
date	2010.02.17.02.27.06;	author xz27;	state Exp;
branches;
next	1.29;

1.29
date	2010.02.17.01.59.14;	author xz27;	state Exp;
branches;
next	1.28;

1.28
date	2010.02.15.06.14.36;	author idw3;	state Exp;
branches;
next	1.27;

1.27
date	2010.02.10.22.31.10;	author idw3;	state Exp;
branches;
next	1.26;

1.26
date	2010.02.10.19.51.34;	author xz27;	state Exp;
branches;
next	1.25;

1.25
date	2010.02.10.05.20.19;	author xz27;	state Exp;
branches;
next	1.24;

1.24
date	2010.02.10.04.46.39;	author xz27;	state Exp;
branches;
next	1.23;

1.23
date	2010.02.10.03.56.52;	author xz27;	state Exp;
branches;
next	1.22;

1.22
date	2010.02.10.03.55.23;	author xz27;	state dead;
branches;
next	1.21;

1.21
date	2010.02.10.03.15.13;	author idw3;	state Exp;
branches;
next	1.20;

1.20
date	2010.02.09.17.19.01;	author idw3;	state Exp;
branches;
next	1.19;

1.19
date	2010.02.08.04.17.05;	author idw3;	state Exp;
branches;
next	1.18;

1.18
date	2010.02.07.23.22.28;	author idw3;	state Exp;
branches;
next	1.17;

1.17
date	2010.02.07.22.22.34;	author idw3;	state Exp;
branches;
next	1.16;

1.16
date	2010.02.07.04.52.56;	author idw3;	state Exp;
branches;
next	1.15;

1.15
date	2010.02.06.22.18.45;	author idw3;	state Exp;
branches;
next	1.14;

1.14
date	2010.02.06.09.27.31;	author idw3;	state Exp;
branches;
next	1.13;

1.13
date	2010.02.05.22.47.38;	author idw3;	state Exp;
branches;
next	1.12;

1.12
date	2010.02.03.03.04.12;	author xz27;	state Exp;
branches;
next	1.11;

1.11
date	2010.02.03.01.59.30;	author idw3;	state Exp;
branches;
next	1.10;

1.10
date	2010.02.02.18.06.23;	author idw3;	state Exp;
branches;
next	1.9;

1.9
date	2010.01.31.19.54.10;	author idw3;	state Exp;
branches;
next	1.8;

1.8
date	2010.01.20.23.45.46;	author idw3;	state Exp;
branches;
next	1.7;

1.7
date	2010.01.20.08.35.45;	author idw3;	state Exp;
branches;
next	1.6;

1.6
date	2010.01.20.07.57.09;	author idw3;	state Exp;
branches;
next	1.5;

1.5
date	2010.01.20.07.13.08;	author idw3;	state Exp;
branches;
next	1.4;

1.4
date	2010.01.19.17.05.05;	author idw3;	state Exp;
branches;
next	1.3;

1.3
date	2010.01.07.23.40.39;	author idw3;	state Exp;
branches;
next	1.2;

1.2
date	2009.12.31.04.39.49;	author idw3;	state Exp;
branches;
next	1.1;

1.1
date	2009.12.17.21.40.40;	author idw3;	state Exp;
branches;
next	;


desc
@@


1.59
log
@*** empty log message ***
@
text
@% main organizing function0,

function aaa_CVaR_EF_sim_02(samplemonths, numofGPDdraws, lowtailp, hightailp, windummy, ...
    alltimedummy, starttimeperioddummy, endtimeperioddummy, expected_dummy, CVaR_lowp)

    onlyexpect = 0;
    if onlyexpect == 1
        expectedonly();
        return
    end

    if CVaR_lowp == 99
        lowps = [0.05, 0.15, 0.25];
        
        if alltimedummy == 1
            main(samplemonths, numofGPDdraws, lowtailp, hightailp, 1, 1, windummy, expected_dummy, CVaR_lowp);
            main(samplemonths, numofGPDdraws, lowtailp, hightailp, 1, 2, windummy, expected_dummy, CVaR_lowp);
            % main(samplemonths, numofGPDdraws, lowtailp, hightailp, 2, 1, windummy);
            % main(samplemonths, numofGPDdraws, lowtailp, hightailp, 2, 2, windummy);
        elseif alltimedummy == 0
            'woooot'
            for i = 1:size(lowps)
                lowps(i)
                main(samplemonths, numofGPDdraws, lowtailp, hightailp, starttimeperioddummy, endtimeperioddummy, windummy, expected_dummy, lowps(i));
            end
        end
    else
        if alltimedummy == 1
            main(samplemonths, numofGPDdraws, lowtailp, hightailp, 1, 1, windummy, expected_dummy, CVaR_lowp);
            main(samplemonths, numofGPDdraws, lowtailp, hightailp, 1, 2, windummy, expected_dummy, CVaR_lowp);
            % main(samplemonths, numofGPDdraws, lowtailp, hightailp, 2, 1, windummy);
            % main(samplemonths, numofGPDdraws, lowtailp, hightailp, 2, 2,
            % windummy);
        elseif alltimedummy == 0
            main(samplemonths, numofGPDdraws, lowtailp, hightailp, starttimeperioddummy, endtimeperioddummy, windummy, expected_dummy, CVaR_lowp);
        end
    end
end    


function main(samplemonths, numofGPDdraws, lowtailp, hightailp, starttimeperioddummy, endtimeperioddummy, windummy, expected_dummy, CVaR_lowp)
    tic
    % import data
    clear global 
    global globalsamplemonths
    globalsamplemonths = samplemonths;
    % global dummys
    % set expected = 1 if we are considering expected returns/SDs
    global expected
    expected = 0;
    if expected == 1
        expectedonly();
    end
    % IF WE ARE USING VIX:
    global creditNoVIX
    global creditAndVIX
    creditNoVIX = 1;
    creditAndVIX = 0;
    
    global meanvarianceonly
    meanvarianceonly = 0; % only loop through MV, skip CVaR
    
    % xlsread to import all the data from an excel
    importfilename = '2009_11_12_expectedassumptions_10.xls';
    
    if windummy == 1
        saveimportfile = ['importdata_' int2str(starttimeperioddummy) '_' int2str(endtimeperioddummy) '.mat'];
        savesimulations = ['simulations_' int2str(starttimeperioddummy) '_' int2str(endtimeperioddummy) '.mat'];
        saveresults = ['exportresults_' int2str(starttimeperioddummy) '_' int2str(endtimeperioddummy) '_' num2str(CVaR_lowp) '.mat']
    elseif windummy == 0
        saveimportfile = ['importdata_' int2str(starttimeperioddummy) '_' int2str(endtimeperioddummy) '.mat'];
        saveresults = ['exportresults_' int2str(starttimeperioddummy) '_' int2str(endtimeperioddummy) '_' num2str(CVaR_lowp) '.mat'];
        savesimulations = ['simulations_' int2str(starttimeperioddummy) '_' int2str(endtimeperioddummy) '.mat'];
    end
    
    sheetname = '6 fact since 73';
    % writefilename = 'graphs and note/Output Summary 2009-11-04.xls';
    writefilename = ['graphs and data/outputsummary_' int2str(starttimeperioddummy) '_' int2str(endtimeperioddummy) '_' num2str(CVaR_lowp) '.xls'];
    % xlswrite(filename, M, sheet, range)
    writedummy = 0; % to only create an excel file of results from export .mat results file
    plotterdummy = 0; % to only plot the results from exportresults_.mat; in windows
    cashreservedummy = 1; % using cash column?
    cashconstraints = 0;
    createinputfileonly = 0; % to only create input .mat file; for SSH into linux
    
    
    
    if windummy == 1   
        %{
        %used for adding expected stuff to save
        importdummy = importdata(importfilename, sheetname, starttimeperioddummy, endtimeperioddummy, cashreservedummy);
        expectCorr = importdummy{3};
        expectAnnSigma = importdummy{4};
        expectAnnReturn = importdummy{5};        
        expectReturn = expectAnnReturn'./12;
        expectSigma = expectAnnSigma'./sqrt(12);        
        expectedReturnsObj = class_expectedreturns(expectReturn, expectSigma, expectCorr);
        save(saveresults, 'expectedReturnsObj', '-append')  
        %}
        % other administrative functions: write and plot
        if writedummy == 1
            writedata(saveresults, writefilename, starttimeperioddummy, endtimeperioddummy, expected_dummy)
            if plotterdummy == 0
                return
            end
        end
        if plotterdummy == 1
            importplotter(saveresults, starttimeperioddummy, endtimeperioddummy)
            return
        end
        % imports data from input file
        importdummy = importdata(importfilename, sheetname, starttimeperioddummy, endtimeperioddummy, cashreservedummy);
        fundReturns = importdummy{1};
        fundNames = importdummy{2};
        expectCorr = importdummy{3};
        expectAnnSigma = importdummy{4};
        expectAnnReturn = importdummy{5};
        expectReturn = expectAnnReturn'./12;
        expectSigma = expectAnnSigma'./sqrt(12);
        % saves imported data into .mat objects file
        
        'saved to an import file'
        if createinputfileonly == 1
            
            save(saveimportfile, ...
                'fundReturns', 'fundNames', 'expectCorr', 'expectSigma', 'expectReturn');        

            % if only want to create input .mat file
            return
        end
        
    elseif windummy == 0 % if in Linux, must have imports .mat file for imported data

        load(saveimportfile)
    end
    histMonths = size(fundReturns, 1);
    NumofFunds = size(fundReturns, 2);
    
    
    expectReturn = expectAnnReturn'./12;
    expectSigma = expectAnnSigma'./sqrt(12);
    expectCalcCovariance = corr2cov(expectSigma, expectCorr);
    %% Assumptions 
    tcopTotalRuns = 1;
    totalsimulations = tcopTotalRuns*numofGPDdraws;  
    NumNormPorts = 25;
    NumPorts = NumNormPorts;
    % RiskFreeRate = 0.03; % assumption for finding Sharpe pt
    format short % vs long, how many places after decimal (4)
    % Constraints on all EF 
    global globalEFconstraints;
    constraintdummy = cashconstraints;
    globalEFconstraints = class_constraintcreator_01(fundNames, constraintdummy);
    'historical returns subclass'
    historicalReturns6fact = subc_histreturns(fundReturns);
    historicalReturns6fact.corrMatrix;
    
    if expected_dummy == 0 
        RiskFreeRate = historicalReturns6fact.arithAnnAvg(7); % use historical annual cash arithmetic return as the risk free rate
    elseif expected_dummy == 1
        RiskFreeRate = expectAnnReturn(7); % use expected annual cash return as the risk free rate
        expectedReturnsObj = class_expectedreturns(expectReturn, expectSigma, expectCorr);
    end
    
    SharperatioRate = 0.015; % DUMAC's, 0.5 is risk free rate, 1.0 is borrow rate
    RiskFreeRate = SharperatioRate;
        
    EFonly_loadfits = 1; % loads from .mat files the input and simulations --> runs only the efficient frontiers and saves export
    if EFonly_loadfits == 0
        save(saveimportfile, ...
            'fundReturns', 'fundNames', 'expectCorr', 'expectSigma', 'expectReturn');
        %% Ljung-Box Q test for serial correlation in monthly returns
        %% piecewise GPD fit to tails and center of historical returns
        %% computes kendall's tau correlation
        'simulations class'
        % expected_dummy = 0;
        % using expected returns/sigmas for t-Copula simulations?
        if expected_dummy == 0
            expected_mu_sigma = [];
            histSims = class_simulations(historicalReturns6fact.rawReturns, samplemonths,...
                numofGPDdraws, tcopTotalRuns, lowtailp, hightailp, expected_dummy, expected_mu_sigma);
        elseif expected_dummy == 1
            expected_mu_sigma = {expectReturn, expectSigma};
            histSims = class_simulations(historicalReturns6fact.rawReturns, samplemonths,...
                numofGPDdraws, tcopTotalRuns, lowtailp, hightailp, expected_dummy, expected_mu_sigma);
        end
            
        % plot2tcopfinalvalues(histSims)
        %% put simulations into own rawreturns object
        'simulations returns subclass'
        % unsmoothed historical raw returns
        unshistrawReturnsObj = subc_simreturns(histSims.unsmoothedReturns, histSims.RHOHAT, histSims.nuhat);
        % tcop simulation raw returns
        tcoprawReturnsObj = subc_simreturns(histSims.tcopdrawRawReturns, histSims.RHOHAT, histSims.nuhat);
        % mean(tcoprawReturnsObj.arithMoAvg, 3)
        % mean(tcoprawReturnsObj.geomMoAvg, 3);
        'saved simulations data'
    
        if expected_dummy == 0 
            save(savesimulations,'histSims', 'historicalReturns6fact', 'unshistrawReturnsObj', 'tcoprawReturnsObj');
        elseif expected_dummy == 1
            save(savesimulations,'histSims', 'expectedReturnsObj', 'historicalReturns6fact', 'unshistrawReturnsObj', 'tcoprawReturnsObj');
        end
         
    elseif EFonly_loadfits == 1
        % load(saveimportfile)
        load(savesimulations)
    end

    %return
    
    %% Normal Mean Variance Efficient Frontiers
    meanvariance();    
        figure
        hold on
        grid on
        % historical normal mean variance
        histNormMeanVarEF = subc_normalmeanvarEF(historicalReturns6fact.arithMoAvg,...
            NumNormPorts, historicalReturns6fact.covMatrix, RiskFreeRate);
        EFplotter(histNormMeanVarEF, 'k')
        % unsmoothed historical normal mean variance
        unshistNormMeanVarEF = subc_normalmeanvarEF(unshistrawReturnsObj.arithMoAvg,...
            NumNormPorts, historicalReturns6fact.covMatrix, RiskFreeRate);
        EFplotter(unshistNormMeanVarEF, 'b')
        %%%title('Normal Mean-Variance Efficient Frontiers')        
        xlabel('Risk (Standard Deviation Annualized %)')
        ylabel('Return (Annualized %)')
        % tcopula simulations normal mean variance
        tcopNormMeanVarEF = subc_normalmeanvarEF(tcoprawReturnsObj.SimAvgArithMoAvgRet,...
            NumNormPorts, histSims.CovarHAT, RiskFreeRate);
        %EFplotter(tcopNormMeanVarEF, 'r')
        %optsharpeplotter(tcopNormMeanVarEF);
        %optsharpeplotter(unshistNormMeanVarEF);
        %optsharpeplotter(histNormMeanVarEF);
        
        legend('Historical', 'Unsmoothed Historical', ...%'Simulation Data',...
             'Location', 'SouthEast')
        
        hold off
        %{
        save(saveresults, 'historicalReturns6fact', 'histSims', ...
            'unshistrawReturnsObj', 'tcoprawReturnsObj', 'histNormMeanVarEF', ...
            'unshistNormMeanVarEF', 'expNormMeanVarEF')    
        %}
        [historicalReturns6fact.arithAnnAvg ; historicalReturns6fact.StandDev * sqrt(12)];
    if meanvarianceonly == 1
        save(saveresults, 'historicalReturns6fact', 'unshistrawReturnsObj', 'tcoprawReturnsObj', ...
            'histNormMeanVarEF', 'unshistNormMeanVarEF', 'tcopNormMeanVarEF')
        return
    end
    %% CVaR EF for given Mean-Variance portfolio weights
    
    global lowp
    lowp = CVaR_lowp;
        
    
    cvargivenweights();
        figure
        hold on
        grid on
        histNormWtsCVaREF = subc_givenweightsCVaREF(samplemonths, ...
            NumPorts, histSims.arithRawFinalFundValue, histNormMeanVarEF.portWts, RiskFreeRate, lowp);    
        EFplotter(histNormWtsCVaREF, 'g')
        unshistNormWtsCVaREF = subc_givenweightsCVaREF(samplemonths, ...
            NumPorts, histSims.arithRawFinalFundValue, unshistNormMeanVarEF.portWts, RiskFreeRate, lowp);      
        EFplotter(unshistNormWtsCVaREF, 'w')
        tcopNormWtsCVaREF = subc_givenweightsCVaREF(samplemonths, ...
            NumPorts, histSims.arithRawFinalFundValue, tcopNormMeanVarEF.portWts, RiskFreeRate, lowp);     
        EFplotter(tcopNormWtsCVaREF, 'r')

    %% CVaR via fmincon

    global glob_fminconoptions  % fmin con options declared as a global variable  
    glob_fminconoptions = optimset('Algorithm','active-set', 'TolFun', 1e-20, 'TolCon', 1e-20, ...
                'TolX', 1e-19, 'MaxFunEvals', 5000, 'MaxIter', 7000, 'UseParallel', 'always');
        
        
    % arithmetic
        global tcopfinalfundvalue;
        tcopfinalfundvalue = histSims.arithRawFinalFundValue; 
    
    cvarfmincon();
        'fmincon'
                
        returns = unshistNormWtsCVaREF.portReturns;
        portweights = tcopNormWtsCVaREF.portWts;
        
        
        compound_dummy = 0; % do compounding? NO! another script to do compounding
        fminconCVaREF = subc_fminconCVaREF(samplemonths, NumPorts,...
                    portweights, returns, RiskFreeRate, compound_dummy);
        EFplotter(fminconCVaREF, 'k')
        'end of fmincon 1'
        
        %fminconCVaREF2 = subc_fminconCVaREF(samplemonths, NumPorts,...
        %            fminconCVaREF.portWts, returns, RiskFreeRate, compound_dummy);
        %EFplotter(fminconCVaREF2, 'c')
        %'end of fmincon 2'
        
        title('CVaR Efficient Frontier - normal weights and genetic')         
        xlabel('Risk (3-yr. CVaR $ - start with $1B)')
        ylabel('Return (%)')
        %optinforatioplotter(histNormWtsCVaREF);
        %optinforatioplotter(unshistNormWtsCVaREF);
        %optinforatioplotter(tcopNormWtsCVaREF);
        %optinforatioplotter(fminconCVaREF);
        %legend('Historical Raw EF', 'Unsmoothed Historical EF', 'Simulated tcopula EF',...
        %    'With rebalancing', 'compounding - no rebalance', 'fmincon EF', ...
        %    'Optimal Information Ratio', 'Location', 'SouthEast') 
        legend('Historical Raw EF', 'Unsmoothed Historical EF', 'Simulated tcopula EF',...
             'fmincon EF','Optimal Information Ratio', 'Location', 'SouthEast')
         
        %save(saveresults, 'Rebalance_CVaREF', '-append')
        % only if we are doing rebalancing code
        
        hold off
        % save(savesimulations,'histSims');
  
        
    
    
    %% Rebalancing / Compounding Assumptions and Options
        
        figure
        hold on
        compound_dummy = 1; % 1 = compound, 0 = don't compound
        
        global compoundmonth
        compoundmonth = 1%2; % 36 to check both scripts

        global rebalanceMonth
        rebalanceMonth = 12; % 36 to check both scripts

        global glob_tcopdrawReturns % raw (monthly) returns from simulations used for rebalancing

        glob_tcopdrawReturns = histSims.tcopdrawRawReturns;
        
 
    %% given weights; do compounding and rebalancing mean-CVaR portfolio 

        %{
        NO fmincon
        for a test: use compound month = 36; should be the same as CVaR for given weights
        
        input: set of weights, all simulations
        output: portfolio CVaR and portfolio return with compounding
        
        use the same code as fmincon with compounding (no rebalancing)
        don't use fmincon, simply calculate the CVaR and return
        %}
    
      	%load('exportresults_1_2.mat')
        
        % uses fmincon CVaR weights
        weights = fminconCVaREF.portWts;
        % compounding
        %compoundingGivenWeights = subc_compoundingGivenWeights...
        %    (weights,samplemonths,NumPorts, RiskFreeRate, compound_dummy);
        %EFplotter(compoundingGivenWeights, 'g')
        
        % rebalancing
        %rebalancingGivenWeights = subc_givenweights_rebalancing_CVaREF...
        %    (NumPorts, weights, RiskFreeRate, compound_dummy)
        %EFplotter(rebalancingGivenWeights, 'r');
        
        % uses normal MV for unsmoothed historical
        weights = unshistNormMeanVarEF.portWts; 
        
        %{
        % compounding 
        Code NOT used
        uns_compoundingGivenWeights = subc_compoundingGivenWeights...
            (weights,samplemonths,NumPorts, RiskFreeRate, compound_dummy);
        EFplotter(uns_compoundingGivenWeights, 'w')
        %}
        
        % rebalancing
        uns_rebalancingGivenWeights = subc_givenweights_rebalancing_CVaREF...
            (NumPorts, weights, RiskFreeRate, compound_dummy);
        EFplotter(uns_rebalancingGivenWeights, 'k')

           
    %% CVaR via fmincon with compounding -  GEOMETRIC FINAL FUND VALUES 
        compound_dummy = 0; % = 1 is broken, old code
        
        % re do given weights - unsmoothed - with geometric returns

        %global tcopfinalfundvalue;
        tcopfinalfundvalue = histSims.GeomRawFinalFundValue; 

        uns_compoundingGivenWeights = subc_givenweightsCVaREF(samplemonths, ...
            NumPorts, tcopfinalfundvalue, unshistNormMeanVarEF.portWts, RiskFreeRate, lowp);      
        EFplotter(uns_compoundingGivenWeights, 'w')

        portweights = fminconCVaREF.portWts;
        returns = uns_compoundingGivenWeights.portReturns;
        
        fminconCompoundCVaREF = subc_fminconCVaREF(samplemonths, NumPorts,...
            portweights, returns, RiskFreeRate, compound_dummy);
        EFplotter(fminconCompoundCVaREF, 'c')
        
        compound_dummy = 1; % switch it back 
        'done given weights CVaR compounding'
        

    %% CVaR with Rebalancing (fmincon)
    
        startweights_compreturns = fminconCVaREF.portWts; %histNormMeanVarEF.portWts; % so rebalancing and compounding start with same weights
        constraint_compreturns = uns_rebalancingGivenWeights.portReturns; %histNormMeanVarEF.portReturns; % so rebalancing and compounding try same return levels

        'CVaR with rebalancing compounding every 12 months'
        Rebalance_CVaREF = subc_fminconCVaREFWithRebalancing...
            (samplemonths, NumPorts, startweights_compreturns, constraint_compreturns, RiskFreeRate, compound_dummy);
        EFplotter(Rebalance_CVaREF, 'b')
        save('rebalanceResults','Rebalance_CVaREF');      

        
    %{
    %% CVaR fmincon with Compounding

        DON'T NEED ANYMORE, USE GEMOETRIC RETURNS OF FMINCONCVAR!!!
        
        'CVaR with compounding'
        
        startweights_compreturns = fminconCVaREF.portWts;
        constraint_compreturns = uns_compoundingGivenWeights.portReturns;
        
        fminconCompoundCVaREF = subc_fminconCVaRwithCompoundingEF...
            (samplemonths, NumPorts, startweights_compreturns, constraint_compreturns, RiskFreeRate);
        EFplotter(fminconCompoundCVaREF, 'c')
    %}
        
    %% rebalancing/compounding graph
        title('Compounding and Rebalancing Mean-CVaR')
        xlabel('Risk (3-yr. CVaR $ - start with $1B)')
        ylabel('Return (%)')
        %optinforatioplotter(histNormWtsCVaREF);
        %optinforatioplotter(unshistNormWtsCVaREF);
        %optinforatioplotter(tcopNormWtsCVaREF);
        %optinforatioplotter(fminconCVaREF);
        %legend('Historical Raw EF', 'Unsmoothed Historical EF', 'Simulated tcopula EF',...
        %    'With rebalancing', 'compounding - no rebalance', 'fmincon EF', ...
        %    'Optimal Information Ratio', 'Location', 'SouthEast') 
        legend('Given Weights Compounding', 'Given Weights Rebalancing', ...
             'unsmoothed historical MV Given Weights Rebalancing', 'unsmoothed historical MV Given Weights Compounding', ...
             'fmincon Compounding', 'fmincon Rebalancing', 'Optimal Information Ratio', 'Location', 'SouthEast')
         
    
    %% save results
    if expected_dummy == 0 
        save(saveresults, 'historicalReturns6fact', 'unshistrawReturnsObj', 'tcoprawReturnsObj', ...
            'histNormMeanVarEF', 'unshistNormMeanVarEF', 'tcopNormMeanVarEF', ...
            'histNormWtsCVaREF', 'unshistNormWtsCVaREF', 'tcopNormWtsCVaREF', 'fminconCVaREF')
    elseif expected_dummy == 1
        save(saveresults, 'expectedReturnsObj', 'historicalReturns6fact', 'unshistrawReturnsObj', 'tcoprawReturnsObj', ...
            'histNormMeanVarEF', 'unshistNormMeanVarEF', 'tcopNormMeanVarEF', ...
            'histNormWtsCVaREF', 'unshistNormWtsCVaREF', 'tcopNormWtsCVaREF', 'fminconCVaREF')        
    end
        
    save(saveresults, 'Rebalance_CVaREF', '-append')
    save(saveresults, 'fminconCompoundCVaREF', '-append')
    %save(saveresults, 'rebalancingGivenWeights', '-append')
    %save(saveresults, 'compoundingGivenWeights', '-append')
    save(saveresults, 'uns_compoundingGivenWeights', '-append')
    save(saveresults, 'uns_rebalancingGivenWeights', '-append')
    
    
    hold off
    
    %% write output to an excel file (different returns objects)
    if windummy == 1
        writedata(saveresults, writefilename, starttimeperioddummy, endtimeperioddummy, expected_dummy);
    end
    return
 
    %% nested functions
    
    % Nested functions: can access variables in outer function, outer
    % function can access variables within nested functions
    
    function meanvariance()

    end
    
    function cvargivenweights()
       
    end

    function cvarfmincon()

    end


end

function optsharpeplotter(obj)
        plot(obj.portSDs(obj.optSharpePt, 1)*(sqrt(12) * 100), obj.portReturns(obj.optSharpePt, 1)*(12 * 100), '-o', 'MarkerSize', 10)
end          

function optinforatioplotter(obj)
        plot(obj.portCVaRs(obj.optSharpePt, 1)*(12) * (3 * 1e9), obj.portReturns(obj.optSharpePt, 1)*(12 * 100), '-o', 'MarkerSize', 10)
end    

function importplotter(saveresults, starttimeperioddummy, endtimeperioddummy)
    
    global expected
    global meanvarianceonly
    global creditAndVIX
    
    load(saveresults)
    if starttimeperioddummy == 1
        startdate = '1973';
    elseif starttimeperioddummy == 2
        startdate = '1994';
    end

    if creditAndVIX == 1
        startdate = '1986';
    end
    if endtimeperioddummy == 1
        enddate = 'May 2008';
    elseif endtimeperioddummy == 2
        enddate = '2009 (Present)';
    end
    
    figure
    hold on
    
    % mean variance plotter

    EFplotter(histNormMeanVarEF, 'g')
    EFplotter(unshistNormMeanVarEF, 'w') 
    
    % EFplotter(tcopNormMeanVarEF, 'r')
    % optsharpeplotter(tcopNormMeanVarEF);
    
    optsharpeplotter(unshistNormMeanVarEF);
    optsharpeplotter(histNormMeanVarEF);

    legend('Historical Raw EF', 'Unsmoothed Historical EF', 'Simulated tcopula EF', ...
        'Optimal Sharpe Ratio', 'Location', 'SouthEast')

    MVEFtitle = ['Mean-Variance Efficient Frontier: ' startdate ' to ' enddate];
    title(MVEFtitle)         
    xlabel('Risk (SD %)')
    ylabel('Return (%)')
    % legend('Expected Assumptions', 'Optimal Sharpe Ratio', 'Location', 'SouthEast')
    
    hold off
    
    if meanvarianceonly == 0
        figure
        hold on
        % CVaR EF plots

        EFplotter(histNormWtsCVaREF, 'g')
        EFplotter(unshistNormWtsCVaREF, 'w')
        EFplotter(tcopNormWtsCVaREF, 'r')
        % EFplotter(expectedWtsCVaREF, 'b')
        EFplotter(fminconCVaREF, 'k')

        CVaRtitle = ['CVaR Efficient Frontier: ' startdate ' to ' enddate];
        title(CVaRtitle)         
        xlabel('Risk (3-yr. CVaR $ - start with $1B)')
        ylabel('Return (%)')

        %optinforatioplotter(histNormWtsCVaREF);
        %optinforatioplotter(unshistNormWtsCVaREF);
        %optinforatioplotter(tcopNormWtsCVaREF);
        % optinforatioplotter(expectedWtsCVaREF); 
        %optinforatioplotter(fminconCVaREF);

        legend('Historical Raw EF', 'Unsmoothed Historical EF', 'Simulated tcopula EF',...
        'fmincon', 'Optimal Information Ratio', 'Location', 'SouthEast')    
    end
end


function y = importdata(importfilename, sheetname, starttimeperioddummy, endtimeperioddummy, cashreservedummy)
    global expected
    global creditNoVIX
    global creditAndVIX
    
    expectedreturnsheet = 'exp data';
    expectedcorrsheet = 'exp data';

 
    i73row = ['6'];
    i94row = ['257'];
    i08row = ['429'];
    i09row = ['445'];
    
    i83row = ['131'];
    i86row = ['171'];
    i90row = ['210'];
    i04row = ['388'];
    
    equitycol = ['H'];
    REcol = ['M'];
    cashcol = ['N']; 
    vixcol = ['O'];
    
    if creditNoVIX == 1   
        if starttimeperioddummy == 1
            startrow = i73row; % only if using IG credit, or IG until July '83
            %startrow = i83row; % only if using credit BLEND!!!
        elseif starttimeperioddummy == 2   
            startrow = i94row;
        end

        if endtimeperioddummy == 1
            endrow = i08row;
        elseif endtimeperioddummy == 2
            endrow = i09row;
        end

        if cashreservedummy == 1
            lastcol = cashcol;
        elseif cashreservedummy == 0
            lastcol = REcol;   
        end
        
    elseif creditAndVIX == 1
        if endtimeperioddummy == 1
            endrow = i08row;
        elseif endtimeperioddummy == 2
            endrow = i09row;
        end
        % startrow = i90row;
        startrow = i86row;  % only if using credit BLEND!!!
        
        lastcol = vixcol;
    end

    importrange = [equitycol startrow ':' lastcol endrow];
    [fundReturns] = xlsread(importfilename, sheetname, importrange);  
    [blah, fundNames] = xlsread(importfilename, sheetname, [equitycol '4:' lastcol '4']);
    
        % ANNUAL EXPECTEDS
    [expectCorr, Benchmarks] = xlsread(importfilename, expectedcorrsheet, 'J3:P10');
    expectSigma = xlsread(importfilename, expectedreturnsheet, 'D4:D10');
    
    % TRANSPOSE: must be row vector!
    expectReturn = xlsread(importfilename, expectedreturnsheet, 'C4:C10');
    
    y = {fundReturns, fundNames, expectCorr, expectSigma, expectReturn};
end

% to write output from export file into excel file
function y = writedata(saveresults, writefilename, starttimeperioddummy, endtimeperioddummy, expected_dummy)

        load(saveresults)
        global expected
        global creditNoVIX
        global creditAndVIX
        
        global meanvarianceonly
    
        if creditNoVIX == 1
            % write all the port weights, returns, sds, sharpes
            sheetnum = [int2str(starttimeperioddummy) ';' int2str(endtimeperioddummy)];
            MVsheet = ['MV output ' sheetnum];
            CVaRsheet = ['CVaR out ' sheetnum];
            corrsheet = ['Corr out ' sheetnum];

            % xlswrite(writefilename, M, outsheet, range)
            topstartrow = ['6'];
            topendrow = ['30'];
            botstartrow = ['35'];
            botendrow = ['59'];

            laststartrow = ['65'];
            lastendrow = ['89'];

            leftstartcol = ['A'];
            leftendcol = ['J'];
            rightstartcol = ['N'];
            rightendcol = ['W'];
        elseif creditAndVIX == 1
            sheetnum = [int2str(starttimeperioddummy) ';' int2str(endtimeperioddummy)];
            MVsheet = ['MV output ' sheetnum];
            CVaRsheet = ['CVaR out ' sheetnum];
            corrsheet = ['Corr out ' sheetnum];
            
            topstartrow = ['6'];
            topendrow = ['30'];
            botstartrow = ['35'];
            botendrow = ['59'];

            laststartrow = ['65'];
            lastendrow = ['89'];

            leftstartcol = ['A'];
            leftendcol = ['K'];
            rightstartcol = ['N'];
            rightendcol = ['X'];        
        end
        
        
        % mean variance
        xlswrite(writefilename, ...
            [histNormMeanVarEF.portWts histNormMeanVarEF.sharpeRatio histNormMeanVarEF.portReturns*12 (12^0.5)*histNormMeanVarEF.portSDs], ...
            MVsheet, [leftstartcol topstartrow ':' leftendcol topendrow]) % hist mean-var

        xlswrite(writefilename, ...
            [unshistNormMeanVarEF.portWts unshistNormMeanVarEF.sharpeRatio unshistNormMeanVarEF.portReturns*12 (12^0.5)*unshistNormMeanVarEF.portSDs], ...
            MVsheet, [rightstartcol topstartrow ':' rightendcol topendrow]) % uns mean-var
        xlswrite(writefilename, ...
            [tcopNormMeanVarEF.portWts tcopNormMeanVarEF.sharpeRatio tcopNormMeanVarEF.portReturns*12 (12^0.5)*tcopNormMeanVarEF.portSDs], ...
            MVsheet, [leftstartcol botstartrow ':' leftendcol botendrow]) % tcop simulated mean-var    
        
        if expected == 1
            xlswrite(writefilename, ...
                [expNormMeanVarEF.portWts expNormMeanVarEF.sharpeRatio expNormMeanVarEF.portReturns*12 (12^0.5)*expNormMeanVarEF.portSDs], ...
                MVsheet, [rightstartcol botstartrow ':' rightendcol botendrow]) % expected mean-var        
        end
        
        if meanvarianceonly == 0
            % mean CVaR
            xlswrite(writefilename, ...
                [histNormWtsCVaREF.portWts histNormWtsCVaREF.sharpeRatio histNormWtsCVaREF.portReturns*12 (12)*histNormWtsCVaREF.portCVaRs], ...
                CVaRsheet, [leftstartcol topstartrow ':' leftendcol topendrow]) % hist mean-CVaR
            xlswrite(writefilename, ...
                [unshistNormWtsCVaREF.portWts unshistNormWtsCVaREF.sharpeRatio unshistNormWtsCVaREF.portReturns*12 (12)*unshistNormWtsCVaREF.portCVaRs], ...
                CVaRsheet, [rightstartcol topstartrow ':' rightendcol topendrow]) % uns mean-CVaR
            xlswrite(writefilename, ...
                [tcopNormWtsCVaREF.portWts tcopNormWtsCVaREF.sharpeRatio tcopNormWtsCVaREF.portReturns*12 (12)*tcopNormWtsCVaREF.portCVaRs], ...
                CVaRsheet, [leftstartcol botstartrow ':' leftendcol botendrow]) % tcop simulated mean-CVaR
            xlswrite(writefilename, ...
                [fminconCVaREF.portWts fminconCVaREF.sharpeRatio fminconCVaREF.portReturns*12 (12)*fminconCVaREF.portCVaRs], ...
                CVaRsheet, [rightstartcol botstartrow ':' rightendcol botendrow]) % fmincon mean-CVaR

            if expected == 1
                xlswrite(writefilename, ...
                    [expectedWtsCVaREF.portWts expectedWtsCVaREF.sharpeRatio expectedWtsCVaREF.portReturns*12 (12)*expectedWtsCVaREF.portCVaRs], ...
                    CVaRsheet, [leftstartcol laststartrow ':' leftendcol lastendrow]) % expected mean-CVaR        
            end
        end
        
        % write corr tables, hist and rhohat, and arithmetic average returns/std
        % means, stds
        retstartcol = ['C'];
        if creditNoVIX == 1
            retendcol = ['I'];
        elseif creditAndVIX == 1
            retendcol = ['J'];
        end
        
        xlswrite(writefilename, ...
            [historicalReturns6fact.arithAnnAvg ; historicalReturns6fact.StandDev * sqrt(12)], ...
            corrsheet, [retstartcol '5:' retendcol '6'])
        xlswrite(writefilename, ...
            [unshistrawReturnsObj.arithAnnAvg ; unshistrawReturnsObj.StandDev * sqrt(12)], ...
            corrsheet, [retstartcol '8:' retendcol '9'])
        xlswrite(writefilename, ...
            [tcoprawReturnsObj.SimAvgArithMoAvgRet * 12 ; tcoprawReturnsObj.SimAvgArithMoAvgSD * sqrt(12)], ...
            corrsheet, [retstartcol '11:' retendcol '12'])
        
        if expected_dummy == 1
            xlswrite(writefilename, ...
                [expectedReturnsObj.expavgret * 12 ; expectedReturnsObj.expavgSD * sqrt(12)], ...
                corrsheet, [retstartcol '14:' retendcol '15'])
        end
        
        % corrs
        % rhohat
        if creditNoVIX == 1
            xlswrite(writefilename, ...
                [tcoprawReturnsObj.RHOHAT], ...
                corrsheet, ['B22:H28'])
            % nuhat
            xlswrite(writefilename, ...
                [tcoprawReturnsObj.nuhat], ...
                corrsheet, ['B30'])
            % hist corrs
            xlswrite(writefilename, ...
                [historicalReturns6fact.corrMatrix], ...
                corrsheet, ['K22:Q28'])  
        elseif creditAndVIX == 1
            xlswrite(writefilename, ...
                [tcoprawReturnsObj.RHOHAT], ...
                corrsheet, ['B22:I29'])
            % nuhat
            xlswrite(writefilename, ...
                [tcoprawReturnsObj.nuhat], ...
                corrsheet, ['B31'])
            % hist corrs
            xlswrite(writefilename, ...
                [historicalReturns6fact.corrMatrix], ...
                corrsheet, ['L22:S29'])  
        end
end

%{
function y = expectedonly()

    NumNormPorts = 25;
    RiskFreeRate = 0.03;
    importfilename = '2009_11_12_expectedassumptions_10.xls';
    expectedreturnsheet = 'exp data';
    expectedcorrsheet = 'exp data';
    
    writefilename = ['graphs and data/outputsummary_' 'expected' '.xls'];
    
    % ANNUAL EXPECTEDS
    [expectCorr, Benchmarks] = xlsread(importfilename, expectedcorrsheet, 'J3:Q11');
    expectSigma = xlsread(importfilename, expectedreturnsheet, 'D4:D11');
    
    % TRANSPOSE: must be row vector!
    expectReturn = xlsread(importfilename, expectedreturnsheet, 'C4:C11');
    expectedReturnsObj = class_expectedreturns(expectReturn, expectSigma, expectCorr);
    
    [blah, fundNames] = xlsread(importfilename, expectedcorrsheet, ['J3:P3']);
    
    global globalEFconstraints;
    constraintdummy = 0;
    globalEFconstraints = class_constraintcreator_01(fundNames, constraintdummy);

    %% mean-variance
    expNormMeanVarEF = subc_normalmeanvarEF(expectedReturnsObj.expavgret, ...
        NumNormPorts, expectedReturnsObj.expCov, RiskFreeRate);
    optsharpeplotter(expNormMeanVarEF);
    
    %{
    %% tcopula
    
    EFonly_loadfits = 0; % loads from .mat files the input and simulations --> runs only the efficient frontiers and saves export
    if EFonly_loadfits == 0
        save(saveimportfile, ...
            'fundReturns', 'fundNames', 'expectCorr', 'expectSigma', 'expectReturn');
        %% Ljung-Box Q test for serial correlation in monthly returns
        %% piecewise GPD fit to tails and center of historical returns
        %% computes kendall's tau correlation
        'simulations class'
        expected_dummy = 0;
        expected_mu_sigma = [];
        histSims = class_simulations(historicalReturns6fact.rawReturns, samplemonths,...
            numofGPDdraws, tcopTotalRuns, lowtailp, hightailp, expected_dummy, expected_mu_sigma);
        % plot2tcopfinalvalues(histSims)
        %% put simulations into own rawreturns object
        'simulations returns subclass'
        % unsmoothed historical raw returns
        unshistrawReturnsObj = subc_simreturns(histSims.unsmoothedReturns, histSims.RHOHAT, histSims.nuhat);
        % tcop simulation raw returns
        tcoprawReturnsObj = subc_simreturns(histSims.tcopdrawRawReturns, histSims.RHOHAT, histSims.nuhat);
        % mean(tcoprawReturnsObj.arithMoAvg, 3)
        % mean(tcoprawReturnsObj.geomMoAvg, 3);
        'saved simulations data'
        save(savesimulations,'histSims', 'historicalReturns6fact', 'unshistrawReturnsObj', 'tcoprawReturnsObj');
    elseif EFonly_loadfits == 1
        % load(saveimportfile)
        load(savesimulations)
    end
    %}
    
    %% save
    
    sheetnum = [' - exp'];
    MVsheet = ['MV output ' sheetnum];
    CVaRsheet = ['CVaR out ' sheetnum];
    corrsheet = ['Corr out ' sheetnum];

    topstartrow = ['6'];
    topendrow = ['30'];
    botstartrow = ['35'];
    botendrow = ['59'];

    laststartrow = ['65'];
    lastendrow = ['89'];

    leftstartcol = ['A'];
    leftendcol = ['K'];
    rightstartcol = ['N'];
    rightendcol = ['X'];   

    % mean variance results

    xlswrite(writefilename, ...
        [expNormMeanVarEF.portWts expNormMeanVarEF.sharpeRatio expNormMeanVarEF.portReturns*12 (12^0.5)*expNormMeanVarEF.portSDs], ...
        MVsheet, [rightstartcol botstartrow ':' rightendcol botendrow]) % expected mean-var       

    % averages, standard deviations
    xlswrite(writefilename, ...
        [expectedReturnsObj.expavgret * 12 ; expectedReturnsObj.expavgSD * sqrt(12)], ...
        corrsheet, [retstartcol '14:' retendcol '15'])
end
%}
@


1.58
log
@*** empty log message ***
@
text
@d168 1
a168 1
    EFonly_loadfits = 0; % loads from .mat files the input and simulations --> runs only the efficient frontiers and saves export
d220 1
a220 1
        EFplotter(histNormMeanVarEF, 'g')
d224 4
a227 4
        EFplotter(unshistNormMeanVarEF, 'w')
        title('Normal Mean-Variance Efficient Frontiers')        
        xlabel('Risk (SD %)')
        ylabel('Return (%)')
d231 4
a234 4
        EFplotter(tcopNormMeanVarEF, 'r')
        optsharpeplotter(tcopNormMeanVarEF);
        optsharpeplotter(unshistNormMeanVarEF);
        optsharpeplotter(histNormMeanVarEF);
d236 2
a237 2
        legend('Historical', 'Unsmoothed Historical', 'Simulation Data',...
             'Optimal Information Ratio', 'Location', 'SouthEast')
@


1.57
log
@*** empty log message ***
@
text
@d146 1
a146 1
    NumNormPorts = 12;
d168 1
a168 1
    EFonly_loadfits = 1; % loads from .mat files the input and simulations --> runs only the efficient frontiers and saves export
d272 6
a277 1
    
d293 1
a293 2
        'end of fmincon'
        
d295 4
d303 4
a306 4
        optinforatioplotter(histNormWtsCVaREF);
        optinforatioplotter(unshistNormWtsCVaREF);
        optinforatioplotter(tcopNormWtsCVaREF);
        optinforatioplotter(fminconCVaREF);
d320 2
d335 1
a335 1
        global glob_fminconoptions  % fmin con options declared as a global variable
d337 1
a337 3
     
        glob_fminconoptions = optimset('Algorithm','active-set', 'TolFun', 1e-19, 'TolCon', 1e-19, ...
                    'TolX', 1e-19, 'MaxFunEvals', 1000, 'MaxIter', 2000, 'UseParallel', 'always');
d362 3
a364 3
        rebalancingGivenWeights = subc_givenweights_rebalancing_CVaREF...
            (NumPorts, weights, RiskFreeRate, compound_dummy)
        EFplotter(rebalancingGivenWeights, 'r');
d370 2
a371 1
        % compounding
d395 1
a395 1
        portweights = tcopNormWtsCVaREF.portWts;
d437 4
a440 4
        optinforatioplotter(histNormWtsCVaREF);
        optinforatioplotter(unshistNormWtsCVaREF);
        optinforatioplotter(tcopNormWtsCVaREF);
        optinforatioplotter(fminconCVaREF);
d462 2
a463 2
    save(saveresults, 'rebalancingGivenWeights', '-append')
    save(saveresults, 'compoundingGivenWeights', '-append')
d567 3
a569 3
        optinforatioplotter(histNormWtsCVaREF);
        optinforatioplotter(unshistNormWtsCVaREF);
        optinforatioplotter(tcopNormWtsCVaREF);
d571 1
a571 1
        optinforatioplotter(fminconCVaREF);
@


1.56
log
@*** empty log message ***
@
text
@d395 1
a395 1
        return 
d406 1
a406 3
        save('rebalanceResults','Rebalance_CVaREF');
    
              
@


1.55
log
@EFplotter working - everything else needs to be fixed
@
text
@d330 1
a330 2

  %{      
d349 4
a352 3
        compoundingGivenWeights = subc_compoundingGivenWeights...
            (weights,samplemonths,NumPorts, RiskFreeRate, compound_dummy);
        EFplotter(compoundingGivenWeights, 'g')
d373 1
a373 2
        
   %}     
d389 3
a391 3
       % fminconCompoundCVaREF = subc_fminconCVaREF(samplemonths, NumPorts,...
       %             portweights, returns, RiskFreeRate, compound_dummy);
       % EFplotter(fminconCompoundCVaREF, 'c')
@


1.54
log
@*** empty log message ***
@
text
@d330 2
d374 1
a374 1
        
d390 3
a392 3
        fminconCompoundCVaREF = subc_fminconCVaREF(samplemonths, NumPorts,...
                    portweights, returns, RiskFreeRate, compound_dummy);
        EFplotter(fminconCompoundCVaREF, 'c')
d395 2
a396 1
        
@


1.53
log
@*** empty log message ***
@
text
@d146 1
a146 1
    NumNormPorts = 25;
d168 1
a168 1
    EFonly_loadfits = 0; % loads from .mat files the input and simulations --> runs only the efficient frontiers and saves export
d329 1
a329 1
                    'TolX', 1e-19, 'MaxFunEvals', 2500, 'MaxIter', 5000, 'UseParallel', 'always');
d394 1
a394 1
return
@


1.52
log
@*** empty log message ***
@
text
@a288 8

        
    %% CVaR via fmincon with GEOMETRIC FINAL FUND VALUES 
        global tcopfinalfundvalue;
        tcopfinalfundvalue = histSims.GeomRawFinalFundValue; 
        fminconCVaREF = subc_fminconCVaREF(samplemonths, NumPorts,...
                    portweights, returns, RiskFreeRate, compound_dummy);
        EFplotter(fminconCVaREF, 'c')
d310 2
d322 1
a322 1
        rebalanceMonth = 1%2; % 36 to check both scripts
d329 1
a329 1
                    'TolX', 1e-19, 'MaxFunEvals', 1250, 'MaxIter', 2500, 'UseParallel', 'always');
d358 2
d364 2
d370 2
d373 7
d381 14
d406 4
d412 2
d422 1
a422 1
    
d436 2
a437 2
             'unsmoothed historical MV Given Weights Compounding', 'unsmoothed historical MV Given Weights Rebalancing', ...
             'fmincon Rebalancing', 'fmincon Compounding', 'Optimal Information Ratio', 'Location', 'SouthEast')
d457 3
@


1.51
log
@added references; draft 03-28-10 sent to rasiel
@
text
@d270 4
a276 2
    %% CVaR via fmincon
    
d279 6
a284 1
        compound_dummy = 0; % do compounding?
d286 1
a286 1
                    tcopNormWtsCVaREF.portWts, tcopNormMeanVarEF.portReturns, RiskFreeRate, compound_dummy);
d290 10
d325 1
a325 1
        compoundmonth = 12; % 36 to check both scripts
d328 1
a328 1
        rebalanceMonth = 12; % 36 to check both scripts
d376 2
a377 2
        startweights_compreturns = tcopNormWtsCVaREF.portWts; %histNormMeanVarEF.portWts; % so rebalancing and compounding start with same weights
        constraint_compreturns = tcopNormWtsCVaREF.portReturns; %histNormMeanVarEF.portReturns; % so rebalancing and compounding try same return levels
d386 2
a387 3
        %global glob_tcopdrawReturns % raw (monthly) returns from
        %simulations used for rebalancing
        %glob_tcopdrawReturns = histSims.tcopdrawRawReturns;
d389 2
a390 1
        'CVaR with compounding'
a391 2
        %fminconCompoundCVaREF = subc_fminconCVaREF(samplemonths,NumPorts,...
        %            startweights_compreturns, tcopNormMeanVarEF.portReturns, RiskFreeRate, compound_dummy);
d398 1
a398 1
        title('Compounding and Rebalancing Mean-CVaR')  
@


1.50
log
@*** empty log message ***
@
text
@d210 1
a210 1
    return
d225 1
a225 1
        title('Mean-Variance Efficient Frontier - Expected Assumptions')         
d235 4
a238 2
        legend('Historical Raw EF', 'Unsmoothed Historical EF', 'Simulated tcopula EF', ...
            'Optimal Sharpe Ratio', 'Location', 'SouthEast')
d308 5
a312 2
        compoundmonth = 12;
        
d337 2
a338 2
        compoundingGivenWeights = subc_compoundingGivenWeights(weights,samplemonths,NumPorts,...
                    RiskFreeRate, compound_dummy);
d341 2
a342 2
        rebalancingGivenWeights = subc_givenweights_rebalancing_CVaREF(NumPorts,...
                weights, RiskFreeRate, compound_dummy)
d348 2
a349 2
        uns_compoundingGivenWeights = subc_compoundingGivenWeights(weights,samplemonths,NumPorts,...
                    RiskFreeRate, compound_dummy);
d352 2
a353 2
        uns_rebalancingGivenWeights = subc_givenweights_rebalancing_CVaREF(NumPorts,...
                weights, RiskFreeRate, compound_dummy);
d363 2
a364 2
        Rebalance_CVaREF = subc_fminconCVaREFWithRebalancing(samplemonths, NumPorts,...
                startweights_compreturns, constraint_compreturns, RiskFreeRate, compound_dummy);
a371 3
    
  
        compound_dummy = 1; % do compounding?
d377 2
a378 2
        fminconCompoundCVaREF = subc_fminconCVaRwithCompoundingEF(samplemonths, NumPorts,...
                startweights_compreturns, constraint_compreturns, RiskFreeRate);
d383 1
a383 1
        title('CVaR Efficient Frontier - normal weights and genetic')         
@


1.49
log
@*** empty log message ***
@
text
@a39 92
function y = expectedonly()

    NumNormPorts = 25;
    RiskFreeRate = 0.03;
    importfilename = '2009_11_12_expectedassumptions_10.xls';
    expectedreturnsheet = 'exp data';
    expectedcorrsheet = 'exp data';
    
    writefilename = ['graphs and data/outputsummary_' 'expected' '.xls'];
    
    % ANNUAL EXPECTEDS
    [expectCorr, Benchmarks] = xlsread(importfilename, expectedcorrsheet, 'J3:Q11');
    expectSigma = xlsread(importfilename, expectedreturnsheet, 'D4:D11');
    
    % TRANSPOSE: must be row vector!
    expectReturn = xlsread(importfilename, expectedreturnsheet, 'C4:C11');
    expectedReturnsObj = class_expectedreturns(expectReturn, expectSigma, expectCorr);
    
    [blah, fundNames] = xlsread(importfilename, expectedcorrsheet, ['J3:P3']);
    
    global globalEFconstraints;
    constraintdummy = 0;
    globalEFconstraints = class_constraintcreator_01(fundNames, constraintdummy);

    %% mean-variance
    expNormMeanVarEF = subc_normalmeanvarEF(expectedReturnsObj.expavgret, ...
        NumNormPorts, expectedReturnsObj.expCov, RiskFreeRate);
    optsharpeplotter(expNormMeanVarEF);
    
    %{
    %% tcopula
    
    EFonly_loadfits = 0; % loads from .mat files the input and simulations --> runs only the efficient frontiers and saves export
    if EFonly_loadfits == 0
        save(saveimportfile, ...
            'fundReturns', 'fundNames', 'expectCorr', 'expectSigma', 'expectReturn');
        %% Ljung-Box Q test for serial correlation in monthly returns
        %% piecewise GPD fit to tails and center of historical returns
        %% computes kendall's tau correlation
        'simulations class'
        expected_dummy = 0;
        expected_mu_sigma = [];
        histSims = class_simulations(historicalReturns6fact.rawReturns, samplemonths,...
            numofGPDdraws, tcopTotalRuns, lowtailp, hightailp, expected_dummy, expected_mu_sigma);
        % plot2tcopfinalvalues(histSims)
        %% put simulations into own rawreturns object
        'simulations returns subclass'
        % unsmoothed historical raw returns
        unshistrawReturnsObj = subc_simreturns(histSims.unsmoothedReturns, histSims.RHOHAT, histSims.nuhat);
        % tcop simulation raw returns
        tcoprawReturnsObj = subc_simreturns(histSims.tcopdrawRawReturns, histSims.RHOHAT, histSims.nuhat);
        % mean(tcoprawReturnsObj.arithMoAvg, 3)
        % mean(tcoprawReturnsObj.geomMoAvg, 3);
        'saved simulations data'
        save(savesimulations,'histSims', 'historicalReturns6fact', 'unshistrawReturnsObj', 'tcoprawReturnsObj');
    elseif EFonly_loadfits == 1
        % load(saveimportfile)
        load(savesimulations)
    end
    %}
    
    %% save
    
    sheetnum = [' - exp'];
    MVsheet = ['MV output ' sheetnum];
    CVaRsheet = ['CVaR out ' sheetnum];
    corrsheet = ['Corr out ' sheetnum];

    topstartrow = ['6'];
    topendrow = ['30'];
    botstartrow = ['35'];
    botendrow = ['59'];

    laststartrow = ['65'];
    lastendrow = ['89'];

    leftstartcol = ['A'];
    leftendcol = ['K'];
    rightstartcol = ['N'];
    rightendcol = ['X'];   

    % mean variance results

    xlswrite(writefilename, ...
        [expNormMeanVarEF.portWts expNormMeanVarEF.sharpeRatio expNormMeanVarEF.portReturns*12 (12^0.5)*expNormMeanVarEF.portSDs], ...
        MVsheet, [rightstartcol botstartrow ':' rightendcol botendrow]) % expected mean-var       

    % averages, standard deviations
    xlswrite(writefilename, ...
        [expectedReturnsObj.expavgret * 12 ; expectedReturnsObj.expavgSD * sqrt(12)], ...
        corrsheet, [retstartcol '14:' retendcol '15'])
end
d737 95
@


1.48
log
@*** empty log message ***
@
text
@d260 1
a260 1
    EFonly_loadfits = 1; % loads from .mat files the input and simulations --> runs only the efficient frontiers and saves export
d302 2
@


1.47
log
@*** empty log message ***
@
text
@d260 1
a260 1
    EFonly_loadfits = 0; % loads from .mat files the input and simulations --> runs only the efficient frontiers and saves export
d382 1
a382 1
             'compounding given weights','fmincon EF','Optimal Information Ratio', 'Location', 'SouthEast')
d418 2
a419 1
        %weights = fminconCVaREF.portWts;
a420 1
        
a424 1
        
d428 12
a439 1
        EFplotter(rebalancingGivenWeights, 'r')
d466 1
a466 1
                startweights_compreturns, constraint_compreturns, RiskFreeRate)
d481 3
a483 2
        legend('Given Weights Compounding', 'Given Weights Rebalancing', 'fmincon Rebalancing',...
             'fmincon Compounding', 'Optimal Information Ratio', 'Location', 'SouthEast')
d501 2
@


1.46
log
@'now compounding/rebalancing is own figure; ran code all the way through once'
@
text
@d260 1
a260 1
    EFonly_loadfits = 1; % loads from .mat files the input and simulations --> runs only the efficient frontiers and saves export
@


1.45
log
@'given weights rebalancing works'
@
text
@d360 10
d371 22
a392 4
    %% CVaR with Rebalancing (fmincon)
    
        startweights_compreturns = tcopNormWtsCVaREF.portWts; %histNormMeanVarEF.portWts; % so rebalancing and compounding start with same weights
        constraint_compreturns = tcopNormWtsCVaREF.portReturns; %histNormMeanVarEF.portReturns; % so rebalancing and compounding try same return levels
d395 3
a397 1
         
d401 1
a401 1
     %{
d404 32
d446 3
a448 5
        glob_tcopdrawReturns = histSims.tcopdrawRawReturns;
    %}
        global compoundmonth
        compoundmonth = 12;
    %{
a457 13
    %}
        
    %% given weights; do compounding mean-CVaR portfolio
        %{
        NO fmincon
        for a test: use compound month = 36; should be the same as CVaR for given weights
        
        input: set of weights, all simulations
        output: portfolio CVaR and portfolio return with compounding
        
        use the same code as fmincon with compounding (no rebalancing)
        don't use fmincon, simply calculate the CVaR and return
        %}
a458 7
      	%load('exportresults_1_2.mat')
        %weights = fminconCVaREF.portWts;
        weights = tcopNormWtsCVaREF.portWts;
        
        rebalancingGivenWeights = subc_givenweights_rebalancing_CVaREF(NumPorts,...
                weights, RiskFreeRate, compound_dummy)
        EFplotter(rebalancingGivenWeights, 'b')
d460 1
a460 14
        compoundingGivenWeights = subc_compoundingGivenWeights(weights,samplemonths,NumPorts,...
                    startweights_compreturns, constraint_compreturns, RiskFreeRate, compound_dummy);
        EFplotter(compoundingGivenWeights, 'c')
        
    %% CVaR via fmincon
    
    cvarfmincon();
        'fmincon'
        compound_dummy = 0; % do compounding?
        fminconCVaREF = subc_fminconCVaREF(samplemonths, NumPorts,...
                    tcopNormWtsCVaREF.portWts, tcopNormMeanVarEF.portReturns, RiskFreeRate, compound_dummy);
        EFplotter(fminconCVaREF, 'k')
        'end of fmincon'

d471 2
a472 2
        legend('Historical Raw EF', 'Unsmoothed Historical EF', 'Simulated tcopula EF',...
             'compounding given weights','fmincon EF','Optimal Information Ratio', 'Location', 'SouthEast')
d474 2
a475 6
        %save(saveresults, 'Rebalance_CVaREF', '-append')
        % only if we are doing rebalancing code
        
        hold off
        % save(savesimulations,'histSims');
        
d486 4
a489 2
    %save(saveresults, 'Rebalance_CVaREF', '-append')
    %save(saveresults, 'fminconCompoundCVaREF', '-append')
@


1.44
log
@*** empty log message ***
@
text
@d412 7
a418 2
      	load('exportresults_1_2.mat')
        weights = fminconCVaREF.portWts;
@


1.43
log
@*** empty log message ***
@
text
@d367 1
a367 1
     %{    
d371 1
d417 1
a417 1
        EFplotter(compoundingGivenWeights, 'r')
d458 2
a459 2
    save(saveresults, 'Rebalance_CVaREF', '-append')
    save(saveresults, 'fminconCompoundCVaREF', '-append')
@


1.42
log
@*** empty log message ***
@
text
@a301 1
    return
d343 1
a343 3
    
    'blah'
    
a345 1
        'blad'
d362 1
a362 1
    %{
d365 1
d367 1
a367 1
        compound_dummy = 1; % 1 = compound, 0 = don't compound
d384 1
a384 1
    
d387 1
d411 5
a415 4
        'starting compounding'
        compoundingGivenWeights = subc_compoundingGivenWeights(samplemonths,NumPorts,...
            startweights,returnconstraints,RiskFreeRate,compound_dummy);
        'compounding works'
a416 1
        'ef plot compounding'
a439 1
        'finish legend'
@


1.41
log
@*** empty log message ***
@
text
@d260 1
a260 1
    EFonly_loadfits = 0; % loads from .mat files the input and simulations --> runs only the efficient frontiers and saves export
d345 1
a345 1
    
d349 1
d412 5
a416 1
        compoundingGivenWeights = subc_compoundingGivenWeights(weights);
d418 1
a418 1
        
d441 3
a443 2
            'fmincon EF', 'compounding given weights','Optimal Information Ratio', 'Location', 'SouthEast')
        
@


1.40
log
@'stress test stuff for jing'
@
text
@d365 1
a365 1

d381 1
a381 1

d398 1
a398 1
    
a401 3
        
        do 
        
a409 1
        
d411 2
d432 3
d436 2
a437 3
            'With rebalancing', 'compounding - no rebalance', 'fmincon EF', ...
            'Optimal Information Ratio', 'Location', 'SouthEast')         
 
@


1.39
log
@*** empty log message ***
@
text
@d260 1
a260 1
    EFonly_loadfits = 1; % loads from .mat files the input and simulations --> runs only the efficient frontiers and saves export
d302 1
d366 2
a367 2
        startweights_compreturns = tcopNormMeanVarEF.portWts; %histNormMeanVarEF.portWts; % so rebalancing and compounding start with same weights
        constraint_compreturns = tcopNormMeanVarEF.portWts; %histNormMeanVarEF.portReturns; % so rebalancing and compounding try same return levels
d374 1
a374 1
                    'TolX', 1e-19, 'MaxFunEvals', 500, 'MaxIter', 2500, 'UseParallel', 'always');
@


1.38
log
@*** empty log message ***
@
text
@d365 2
a366 2
        startweights_compreturns = histNormMeanVarEF.portWts; % so rebalancing and compounding start with same weights
        constraint_compreturns = histNormMeanVarEF.portReturns; % so rebalancing and compounding try same return levels
@


1.37
log
@'1000 simulations, 2500 fun evals'
@
text
@d365 3
d373 1
a373 1
                    'TolX', 1e-19, 'MaxFunEvals', 1250, 'MaxIter', 2500, 'UseParallel', 'always');
d377 1
a377 1
                histNormMeanVarEF.portWts, histNormMeanVarEF.portReturns, RiskFreeRate, compound_dummy);
d393 1
a393 1
        %            tcopNormWtsCVaREF.portWts, tcopNormMeanVarEF.portReturns, RiskFreeRate, compound_dummy);
d395 1
a395 1
                tcopNormWtsCVaREF.portWts, tcopNormMeanVarEF.portReturns, RiskFreeRate)
d398 18
@


1.36
log
@*** empty log message ***
@
text
@d370 1
a370 1
                    'TolX', 1e-19, 'MaxFunEvals', 2500, 'MaxIter', 2500, 'UseParallel', 'always');
@


1.35
log
@*** empty log message ***
@
text
@d260 1
a260 1
    EFonly_loadfits = 0; % loads from .mat files the input and simulations --> runs only the efficient frontiers and saves export
@


1.34
log
@Add global glob_fminconoptions for consistency
@
text
@a362 1
    
d364 14
a377 16
    global glob_tcopdrawReturns % raw (monthly) returns from simulations used for rebalancing
    global glob_fminconoptions  % fmin con options declared as a global variable
    
    compound_dummy = 1;
    glob_tcopdrawReturns = histSims.tcopdrawRawReturns;
    glob_fminconoptions = optimset('Algorithm','active-set', 'TolFun', 1e-19, 'TolCon', 1e-19, ...
                'TolX', 1e-19, 'MaxFunEvals', 1000, 'MaxIter', 2500, 'UseParallel', 'always');
            
    'CVaR with rebalancing compounding every 12 months'
    Rebalance_CVaREF = subc_fminconCVaREFWithRebalancing(samplemonths, NumPorts,...
            histNormMeanVarEF.portWts, histNormMeanVarEF.portReturns, RiskFreeRate, compound_dummy);
    EFplotter(Rebalance_CVaREF, 'b')
    save('rebalanceResults','Rebalance_CVaREF');
    
        
    
a393 1
   
@


1.33
log
@Make global variable glob_maxfuneval to establish consistency
@
text
@d366 2
a367 1
    global glob_maxfuneval  % maximum number of evaluations for fmincon function to establish consistency
d370 3
a372 1
    glob_maxfuneval = 1000;
@


1.32
log
@*** empty log message ***
@
text
@d366 1
a366 1
    global glob_histRawReturns;
d369 1
a369 1
    glob_histRawReturns = histSims.rawReturns;
@


1.31
log
@*** empty log message ***
@
text
@d260 1
a260 1
    EFonly_loadfits = 1; % loads from .mat files the input and simulations --> runs only the efficient frontiers and saves export
d377 1
a377 1
    %{
d389 6
a394 6
        fmincomCompoundCVaREF = subc_fminconCVaREF(samplemonths,NumPorts,...
                    tcopNormWtsCVaREF.portWts, tcopNormMeanVarEF.portReturns, RiskFreeRate, compound_dummy);
        %fmincomCompoundCVaREF = subc_fminconCVaRwithCompoundingEF(samplemonths, NumPorts,...
        %        tcopNormWtsCVaREF.portWts, tcopNormMeanVarEF.portReturns, RiskFreeRate)
        EFplotter(fmincomCompoundCVaREF, 'c')
    %}
d414 1
a414 1
            'With rebalancing', 'fmincon EF', ...
d433 3
a435 1
        
@


1.30
log
@*** empty log message ***
@
text
@d397 1
a397 1
    %{
d404 1
a404 1
    %}
d412 1
a412 1
        %optinforatioplotter(fminconCVaREF);
@


1.29
log
@change rebalancing code to automate CVaR with or without rebalancing
@
text
@d369 2
a370 2
    glob_histRawReturns = historicalReturns6fact.rawReturns;
    'CVaR with rebalancing'
d397 1
d399 1
a399 1

d404 2
d412 1
a412 1
        optinforatioplotter(fminconCVaREF);
d414 1
a414 1
            'Arithmetic rebalancing', 'fmincon EF', ...
@


1.28
log
@'create histogram for simulations given weights; rolling period (annual) almost complete'
@
text
@d363 1
a363 1
    %{
d366 2
d369 2
a370 1
    'CVaR with arithmetic rebalancing'
d372 1
a372 1
            histNormMeanVarEF.portWts, histNormMeanVarEF.portReturns, RiskFreeRate);
d375 1
a375 1
    %}
@


1.27
log
@'finished CVaR for joing, 75%, 85%'
@
text
@d12 25
a36 7
    if alltimedummy == 1
        main(samplemonths, numofGPDdraws, lowtailp, hightailp, 1, 1, windummy, expected_dummy, CVaR_lowp);
        main(samplemonths, numofGPDdraws, lowtailp, hightailp, 1, 2, windummy, expected_dummy, CVaR_lowp);
        % main(samplemonths, numofGPDdraws, lowtailp, hightailp, 2, 1, windummy);
        % main(samplemonths, numofGPDdraws, lowtailp, hightailp, 2, 2, windummy);
    elseif alltimedummy == 0
        main(samplemonths, numofGPDdraws, lowtailp, hightailp, starttimeperioddummy, endtimeperioddummy, windummy, expected_dummy, CVaR_lowp);
a37 1
    
d256 3
a258 1
         
@


1.26
log
@Fixed portfolio returns given weights.
@
text
@d144 1
a144 1
        saveresults = ['exportresults_' int2str(starttimeperioddummy) '_' int2str(endtimeperioddummy) '.mat']
d147 1
a147 1
        saveresults = ['exportresults_' int2str(starttimeperioddummy) '_' int2str(endtimeperioddummy) '.mat'];
d153 1
a153 1
    writefilename = ['graphs and data/outputsummary_' int2str(starttimeperioddummy) '_' int2str(endtimeperioddummy) '.xls'];
d161 1
a161 1
   
d344 1
a344 1
    
d353 2
a354 1
    
d660 1
a660 1
                [histNormWtsCVaREF.portWts histNormWtsCVaREF.sharpeRatio histNormWtsCVaREF.portReturns*12 (12^0.5)*histNormWtsCVaREF.portCVaRs], ...
d663 1
a663 1
                [unshistNormWtsCVaREF.portWts unshistNormWtsCVaREF.sharpeRatio unshistNormWtsCVaREF.portReturns*12 (12^0.5)*unshistNormWtsCVaREF.portCVaRs], ...
d666 1
a666 1
                [tcopNormWtsCVaREF.portWts tcopNormWtsCVaREF.sharpeRatio tcopNormWtsCVaREF.portReturns*12 (12^0.5)*tcopNormWtsCVaREF.portCVaRs], ...
d669 1
a669 1
                [fminconCVaREF.portWts fminconCVaREF.sharpeRatio fminconCVaREF.portReturns*12 (12^0.5)*fminconCVaREF.portCVaRs], ...
d674 1
a674 1
                    [expectedWtsCVaREF.portWts expectedWtsCVaREF.sharpeRatio expectedWtsCVaREF.portReturns*12 (12^0.5)*expectedWtsCVaREF.portCVaRs], ...
@


1.25
log
@*** empty log message ***
@
text
@d352 2
a353 1

@


1.24
log
@add rebalancing code
@
text
@d241 1
a241 1
    EFonly_loadfits = 0; % loads from .mat files the input and simulations --> runs only the efficient frontiers and saves export
@


1.23
log
@*** empty log message ***
@
text
@d1 1
a1 1
% main organizing function
d344 1
a344 1
    %{
d348 1
a348 1
    'CVaR with rebalancing'
d350 1
a350 1
            histNormMeanVarEF.portWts, histNormMeanVarEF.portReturns, RiskFreeRate)
d353 1
a353 1
        
d355 2
a356 1
        global glob_tcopdrawReturns % raw (monthly) returns from simulations used for rebalancing
d365 4
a368 5
        %fmincomCompoundCVaREF = subc_fminconCVaREF(samplemonths,
        %NumPorts,...
        %            tcopNormWtsCVaREF.portWts, tcopNormMeanVarEF.portReturns, RiskFreeRate, compound_dummy);
        fmincomCompoundCVaREF = subc_fminconCVaRwithCompoundingEF(samplemonths, NumPorts,...
                tcopNormWtsCVaREF.portWts, tcopNormMeanVarEF.portReturns, RiskFreeRate)
d371 1
d387 1
a387 1
            'rebalancing', 'fmincon EF', ...
@


1.22
log
@*** empty log message ***
@
text
@@


1.21
log
@'lowp for cvar calculations now global and an input'
@
text
@@


1.20
log
@'updated z_cvar, test weights for jing'
@
text
@d3 2
a4 1
function aaa_CVaR_EF_sim_02(samplemonths, numofGPDdraws, lowtailp, hightailp, windummy, alltimedummy, starttimeperioddummy, endtimeperioddummy, expected_dummy)
d13 2
a14 2
        main(samplemonths, numofGPDdraws, lowtailp, hightailp, 1, 1, windummy, expected_dummy);
        main(samplemonths, numofGPDdraws, lowtailp, hightailp, 1, 2, windummy, expected_dummy);
d18 1
a18 1
        main(samplemonths, numofGPDdraws, lowtailp, hightailp, starttimeperioddummy, endtimeperioddummy, windummy, expected_dummy);
d116 1
a116 1
function main(samplemonths, numofGPDdraws, lowtailp, hightailp, starttimeperioddummy, endtimeperioddummy, windummy, expected_dummy)
d321 7
d333 1
a333 1
            NumPorts, histSims.arithRawFinalFundValue, histNormMeanVarEF.portWts, RiskFreeRate);    
d336 1
a336 1
            NumPorts, histSims.arithRawFinalFundValue, unshistNormMeanVarEF.portWts, RiskFreeRate);      
d339 1
a339 1
            NumPorts, histSims.arithRawFinalFundValue, tcopNormMeanVarEF.portWts, RiskFreeRate);     
d344 1
d370 1
a370 1
        
@


1.19
log
@'compounding, fmincon test no longer /sample months'
@
text
@d192 2
d270 7
a276 1
        save(savesimulations,'histSims', 'historicalReturns6fact', 'unshistrawReturnsObj', 'tcoprawReturnsObj');
@


1.18
log
@'made new subclass for CVaR with compounding'
@
text
@d238 1
a238 1
    EFonly_loadfits = 1; % loads from .mat files the input and simulations --> runs only the efficient frontiers and saves export
d329 6
a334 6
    %global glob_tcopdrawReturns % raw (monthly) returns from simulations used for rebalancing
    %glob_tcopdrawReturns = histSims.tcopdrawRawReturns;
    %'CVaR with rebalancing'
    %Rebalance_CVaREF = subc_fminconCVaREFWithRebalancing(samplemonths, NumPorts,...
    %        histNormMeanVarEF.portWts, histNormMeanVarEF.portReturns, RiskFreeRate)
    %EFplotter(Rebalance_CVaREF, 'b')
d347 2
a348 1
        %fmincomCompoundCVaREF = subc_fminconCVaREF(samplemonths, NumPorts,...
@


1.17
log
@*** empty log message ***
@
text
@d347 4
a350 2
        fmincomCompoundCVaREF = subc_fminconCVaREF(samplemonths, NumPorts,...
                    tcopNormWtsCVaREF.portWts, tcopNormMeanVarEF.portReturns, RiskFreeRate, compound_dummy);
@


1.16
log
@'untested compounding CVaR added to fmincon, need to use compound_dummy; need to check proceed step, changed to ||'
@
text
@d154 1
a154 1
    writedummy = 1; % to only create an excel file of results from export .mat results file
d160 2
d163 2
a164 1
        %{ % used for adding expected stuff to save
d238 1
a238 1
    EFonly_loadfits = 0; % loads from .mat files the input and simulations --> runs only the efficient frontiers and saves export
d329 22
a350 8
%{
    global glob_tcopdrawReturns % raw (monthly) returns from simulations used for rebalancing
    glob_tcopdrawReturns = histSims.tcopdrawRawReturns;
    'CVaR with rebalancing'
    Rebalance_CVaREF = subc_fminconCVaREFWithRebalancing(samplemonths, NumPorts,...
            histNormMeanVarEF.portWts, histNormMeanVarEF.portReturns, RiskFreeRate)
    EFplotter(Rebalance_CVaREF, 'b')
%}
d353 1
a353 2
        global compoundmonth
        compoundmonth = 12;
@


1.15
log
@'for expected simulations, use expected cash return as risk free rate for doing sharpe ratios'
@
text
@d336 3
d340 1
a340 1
                    tcopNormWtsCVaREF.portWts, tcopNormMeanVarEF.portReturns, RiskFreeRate);
@


1.14
log
@'implemented expected for jing - t copula simulations'
@
text
@a141 1
        savefilename = ['exportresults_' int2str(starttimeperioddummy) '_' int2str(endtimeperioddummy) '.mat'];
d146 1
a146 1
        savefilename = ['exportresults_' int2str(starttimeperioddummy) '_' int2str(endtimeperioddummy) '.mat'];
d154 1
a154 1
    writedummy = 0; % to only create an excel file of results from export .mat results file
d161 10
d173 1
a173 1
            writedata(saveresults, writefilename, starttimeperioddummy, endtimeperioddummy)
d179 1
a179 1
            importplotter(savefilename, starttimeperioddummy, endtimeperioddummy)
d187 2
a188 2
        expectSigma = importdummy{4};
        expectReturn = importdummy{5};
d207 4
a210 2
    expectReturn = expectReturn'./12;
    expectSigma = expectSigma'./sqrt(12);
d226 9
a234 2
    RiskFreeRate = historicalReturns6fact.arithAnnAvg(7); % use historical annual cash arithmetic return as the risk free rate
 
d250 1
a250 1
            expected_mu_sigma = {expectReturn, expectSigma}
d298 1
a298 1
        save(savefilename, 'historicalReturns6fact', 'histSims', ...
d304 1
a304 1
        save(savefilename, 'historicalReturns6fact', 'unshistrawReturnsObj', 'tcoprawReturnsObj', ...
d349 2
a350 5
        save(savefilename, 'historicalReturns6fact', 'unshistrawReturnsObj', 'tcoprawReturnsObj', ...
            'histNormMeanVarEF', 'unshistNormMeanVarEF', 'tcopNormMeanVarEF', ...
            'histNormWtsCVaREF', 'unshistNormWtsCVaREF', 'tcopNormWtsCVaREF', 'fminconCVaREF')
            
        %save(savefilename, 'Rebalance_CVaREF', '-append')
d356 11
d369 1
a369 1
        writedata(savefilename, writefilename, starttimeperioddummy, endtimeperioddummy);
d401 1
a401 1
function importplotter(savefilename, starttimeperioddummy, endtimeperioddummy)
d407 1
a407 1
    load(savefilename)
d547 1
a547 1
function y = writedata(savefilename, writefilename, starttimeperioddummy, endtimeperioddummy)
d549 1
a549 1
        load(savefilename)
d656 1
a656 1
        if expected == 1
@


1.13
log
@'commented out rebalancing to run sims for jing; added IG to credit blend for 1973 - July 1983'
@
text
@d3 1
a3 1
function aaa_CVaR_EF_sim_02(samplemonths, numofGPDdraws, lowtailp, hightailp, windummy, alltimedummy, starttimeperioddummy, endtimeperioddummy)
d12 2
a13 2
        main(samplemonths, numofGPDdraws, lowtailp, hightailp, 1, 1, windummy);
        main(samplemonths, numofGPDdraws, lowtailp, hightailp, 1, 2, windummy);
d17 1
a17 1
        main(samplemonths, numofGPDdraws, lowtailp, hightailp, starttimeperioddummy, endtimeperioddummy, windummy);
d45 39
a102 4
    expNormMeanVarEF = subc_normalmeanvarEF(expectedReturnsObj.expavgret, ...
        NumNormPorts, expectedReturnsObj.expCov, RiskFreeRate);
    optsharpeplotter(expNormMeanVarEF);

d115 1
a115 1
function main(samplemonths, numofGPDdraws, lowtailp, hightailp, starttimeperioddummy, endtimeperioddummy, windummy)
d159 1
a159 1
    createinputfileonly = 1; % to only create input .mat file; for SSH into linux
d176 1
a176 1
        fundNames = importdummy{2};    
d225 12
a236 2
        histSims = class_simulations(historicalReturns6fact.rawReturns, samplemonths,...
            numofGPDdraws, tcopTotalRuns, lowtailp, hightailp);
d333 5
a337 2
            'histNormWtsCVaREF', 'unshistNormWtsCVaREF', 'tcopNormWtsCVaREF', 'fminconCVaREF', ...
            'Rebalance_CVaREF')
d383 1
a383 1
        startdate = '1983';
@


1.12
log
@*** empty log message ***
@
text
@d124 1
a124 1
    createinputfileonly = 0; % to only create input .mat file; for SSH into linux
d149 4
d158 1
d182 1
a182 1
    EFonly_loadfits = 1; % loads from .mat files the input and simulations --> runs only the efficient frontiers and saves export
d263 1
d270 1
d428 2
a429 2
            % startrow = i73row; % only if using IG credit
            startrow = i83row; % only if using credit BLEND!!!
@


1.11
log
@*** empty log message ***
@
text
@d146 1
a146 2
        save(saveimportfile, ...
            'fundReturns', 'fundNames', 'expectCorr', 'expectSigma', 'expectReturn');
d179 2
a180 1

@


1.10
log
@'changed name of CVaREFwithRebalancing initiator function (should still change names of the other nested functions); added CVaRwithRebalancing to aaa_; simulations.mat also includes the returns objects, allows for continuing from the saved simulations now'
@
text
@d178 1
a178 1
    EFonly_loadfits = 0; % loads from .mat files the input and simulations --> runs only the efficient frontiers and saves export
@


1.9
log
@"added code for calculating stuff for Jing's weights (expected): z_expected_CVaR .m and expected weights -CVaR .xls"
@
text
@a81 1
    
a85 1
    
a92 1
    
d96 2
a97 2
    creditNoVIX = 0;
    creditAndVIX = 1;
a119 1

d121 1
a121 2
    plotterdummy = 1; % to only plot the results from exportresults_.mat; in windows
    
d124 1
a124 2
    
    createinputfileonly = 1; % to only create input .mat file; for SSH into linux
a137 1
        
a148 1
        
a156 1

a158 1
    
a161 1

a168 1
    
d176 26
a202 20
    RiskFreeRate = historicalReturns6fact.arithAnnAvg(7); % use historical annual cash arithmetic return as the risk free rate
    
    
    %% Ljung-Box Q test for serial correlation in monthly returns
    %% piecewise GPD fit to tails and center of historical returns
    %% computes kendall's tau correlation
    'simulations class'
    histSims = class_simulations(historicalReturns6fact.rawReturns, samplemonths,...
        numofGPDdraws, tcopTotalRuns, lowtailp, hightailp);
    % plot2tcopfinalvalues(histSims)
    
    %% put simulations into own rawreturns object
    'simulations returns subclass'
    % unsmoothed historical raw returns
    unshistrawReturnsObj = subc_simreturns(histSims.unsmoothedReturns, histSims.RHOHAT, histSims.nuhat);
    % tcop simulation raw returns
    tcoprawReturnsObj = subc_simreturns(histSims.tcopdrawRawReturns, histSims.RHOHAT, histSims.nuhat);
    % mean(tcoprawReturnsObj.arithMoAvg, 3)
    % mean(tcoprawReturnsObj.geomMoAvg, 3);
    
d204 1
a204 2
    meanvariance();
    
a207 1

a211 1

a215 1

a218 1

a222 1

a225 1

a227 1

a228 1

a234 3

    
    
a239 1
    
a241 1
        
a244 2
        

a247 1

a250 1

a253 1
        
d256 8
a263 1
        
a265 1
        
a268 1

a271 1

a275 1
        
d277 2
a278 2
            'fmincon EF', 'Optimal Information Ratio', 'Location', 'SouthEast')         
        
d281 2
a282 1
            'histNormWtsCVaREF', 'unshistNormWtsCVaREF', 'tcopNormWtsCVaREF', 'fminconCVaREF')
d284 1
a284 1
        save(savesimulations,'histSims');
a286 1

a289 1
    
d291 1
a291 1
    
@


1.8
log
@2010-01-20 uses average cash return as risk free rate
@
text
@d265 1
@


1.7
log
@"fixed the import data function, properly accounts for 1986 start of credit blend; still need to make it so can do IG credit"
@
text
@d125 1
a125 1
    plotterdummy = 0; % to only plot the results from exportresults_.mat; in windows
d130 1
a130 1
    createinputfileonly = 0; % to only create input .mat file; for SSH into linux
d178 1
a178 1
    RiskFreeRate = 0.03; % assumption for finding Sharpe pt
d189 3
d350 1
a350 1
        startdate = '1973';
d397 1
a397 1
        EFplotter(expectedWtsCVaREF, 'b')
d408 1
a408 1
        optinforatioplotter(expectedWtsCVaREF); 
d412 1
a412 1
        'Expected Assumptions EF', 'fmincon', 'Optimal Information Ratio', 'Location', 'SouthEast')    
d431 1
d444 1
a444 1
            startrow = i86row; % only if using credit BLEND!!!
d559 1
a559 1
                [histNormWtsCVaREF.portWts histNormWtsCVaREF.sharpeRatio histNormWtsCVaREF.portReturns histNormWtsCVaREF.portCVaRs], ...
d562 1
a562 1
                [unshistNormWtsCVaREF.portWts unshistNormWtsCVaREF.sharpeRatio unshistNormWtsCVaREF.portReturns unshistNormWtsCVaREF.portCVaRs], ...
d565 1
a565 1
                [tcopNormWtsCVaREF.portWts tcopNormWtsCVaREF.sharpeRatio tcopNormWtsCVaREF.portReturns tcopNormWtsCVaREF.portCVaRs], ...
d568 1
a568 1
                [fminconCVaREF.portWts fminconCVaREF.sharpeRatio fminconCVaREF.portReturns fminconCVaREF.portCVaRs], ...
d573 1
a573 1
                    [expectedWtsCVaREF.portWts expectedWtsCVaREF.sharpeRatio expectedWtsCVaREF.portReturns expectedWtsCVaREF.portCVaRs], ...
@


1.6
log
@"fixed some comments in aaa_; new sheet in assumptions.xls for IG credit"
@
text
@d114 3
a116 3
        saveimportfile = ['/afs/acpub.duke.edu/users/i/d/idw3/AFSDocs/MATLAB/importdata_' int2str(starttimeperioddummy) '_' int2str(endtimeperioddummy) '.mat'];
        savefilename = ['/afs/acpub.duke.edu/users/i/d/idw3/AFSDocs/MATLAB/exportresults_' int2str(starttimeperioddummy) '_' int2str(endtimeperioddummy) '.mat'];
        savesimulations = ['/afs/acpub.duke.edu/users/i/d/idw3/AFSDocs/MATLAB/simulations_' int2str(starttimeperioddummy) '_' int2str(endtimeperioddummy) '.mat'];
d439 2
a440 1
            startrow = i73row;
d464 1
a464 1
        startrow = i86row;
@


1.5
log
@"Refactored code works"
@
text
@d14 2
a15 2
        main(samplemonths, numofGPDdraws, lowtailp, hightailp, 2, 1, windummy);
        main(samplemonths, numofGPDdraws, lowtailp, hightailp, 2, 2, windummy);
a91 1
    
d124 1
a124 1
    writedummy = 0; % to only create an input file (.mat); for SSH into linux
d127 1
a127 1
    cashreservedummy = 1;
d130 1
a130 1
    createinputfileonly = 0;
d162 1
a162 1
    elseif windummy == 0
d482 1
@


1.4
log
@"fixed errors in class_simulations; added obj to methods in subc_ ... EF"
@
text
@d104 1
a104 1
    meanvarianceonly = 1; % only loop through MV, skip CVaR
a208 23

    if meanvarianceonly == 1
        save(savefilename, 'historicalReturns6fact', 'unshistrawReturnsObj', 'tcoprawReturnsObj', ...
            'histNormMeanVarEF', 'unshistNormMeanVarEF', 'tcopNormMeanVarEF')
        return
    end
    
    %% CVaR EF for given portfolio weights
    cvargivenweights();
    
    %% CVaR via fmincon
    cvarfmincon();
    
    %% write output to an excel file (different returns objects)

    if windummy == 1
        writedata(savefilename, writefilename, starttimeperioddummy, endtimeperioddummy);
    end
    
    return
    
    % Nested functions: can access variables in outer function, outer
    % function can access variables within nested functions
a209 1
    function meanvariance()
d249 6
d257 3
a259 1
    function cvargivenweights()
d275 1
a275 1

d277 5
a281 4
        tcopfinalfundvalue = histSims.arithRawFinalFundValue;        
    end

    function cvarfmincon()
d303 24
d557 1
a557 1
                [unshistNormWtsCVaREF.portWts unshistNormWtsCVaREF.sharpeRatio unshistNormWtsCVaREF.portReturnsuns histNormWtsCVaREF.portCVaRs], ...
@


1.3
log
@"added returns classes; changed methods in simulations functions... still need to change methods in EF classes"
@
text
@d125 2
a126 2
    writedummy = 0;
    plotterdummy = 0;
@


1.2
log
@cleaned some of aaa_, broke into functions based on mv, cvar, etc.  expected only does not work yet.  setting up for GUI...
@
text
@d125 2
a126 2
    writedummy = 1;
    plotterdummy = 1;    
@


1.1
log
@updated class_simulations, includes all functions; still need to seperate the class?
@
text
@d5 1
a5 1
    onlyexpect = 1;
d40 2
d92 5
d128 7
a134 1
    if windummy == 1    
d145 2
a146 6
    end

    cashreservedummy = 1;
    cashconstraints = 0;
    
    if windummy == 1
a147 1

d153 1
a153 1
        
d158 5
a165 3
    
%end
%function awefaewf() 
d208 1
a208 48
    figure
    hold on
    grid on

    % historical normal mean variance
    histNormMeanVarEF = subc_normalmeanvarEF(historicalReturns6fact.arithMoAvg,...
        NumNormPorts, historicalReturns6fact.covMatrix, RiskFreeRate);
    EFplotter(histNormMeanVarEF, 'g')
    
    % unsmoothed historical normal mean variance
    unshistNormMeanVarEF = subc_normalmeanvarEF(unshistrawReturnsObj.arithMoAvg,...
        NumNormPorts, historicalReturns6fact.covMatrix, RiskFreeRate);
    EFplotter(unshistNormMeanVarEF, 'w')
    
    title('Mean-Variance Efficient Frontier - Expected Assumptions')         
    xlabel('Risk (SD %)')
    ylabel('Return (%)')
    
    % tcopula simulations normal mean variance
    tcopNormMeanVarEF = subc_normalmeanvarEF(tcoprawReturnsObj.SimAvgArithMoAvgRet,...
        NumNormPorts, histSims.CovarHAT, RiskFreeRate);
    EFplotter(tcopNormMeanVarEF, 'r')
    
    if expected == 1
        % expected assumptions normal mean-variance
        expNormMeanVarEF = subc_normalmeanvarEF(expectedReturnsObj.expavgret, ...
            NumNormPorts, expectedReturnsObj.expCov, RiskFreeRate);
        optsharpeplotter(expNormMeanVarEF);
    end
    
    optsharpeplotter(tcopNormMeanVarEF);
    optsharpeplotter(unshistNormMeanVarEF);
    optsharpeplotter(histNormMeanVarEF);
    
    
    legend('Historical Raw EF', 'Unsmoothed Historical EF', 'Simulated tcopula EF', ...
        'Optimal Sharpe Ratio', 'Location', 'SouthEast')
    
    
    hold off
    
    %{
    save(savefilename, 'historicalReturns6fact', 'histSims', ...
        'unshistrawReturnsObj', 'tcoprawReturnsObj', 'histNormMeanVarEF', ...
        'unshistNormMeanVarEF', 'expNormMeanVarEF')    
    %}
    [historicalReturns6fact.arithAnnAvg ; historicalReturns6fact.StandDev * sqrt(12)];

d217 1
a217 3
    figure
    hold on
    grid on
d219 2
a220 11
    histNormWtsCVaREF = subc_givenweightsCVaREF(samplemonths, ...
        NumPorts, histSims.arithRawFinalFundValue, histNormMeanVarEF.portWts, RiskFreeRate);    
    EFplotter(histNormWtsCVaREF, 'g')
    
    unshistNormWtsCVaREF = subc_givenweightsCVaREF(samplemonths, ...
        NumPorts, histSims.arithRawFinalFundValue, unshistNormMeanVarEF.portWts, RiskFreeRate);      
    EFplotter(unshistNormWtsCVaREF, 'w')
    
    tcopNormWtsCVaREF = subc_givenweightsCVaREF(samplemonths, ...
        NumPorts, histSims.arithRawFinalFundValue, tcopNormMeanVarEF.portWts, RiskFreeRate);     
    EFplotter(tcopNormWtsCVaREF, 'r')
d222 4
a225 5
    if expected == 1
    expectedWtsCVaREF = subc_givenweightsCVaREF(samplemonths, ...
        NumPorts, histSims.arithRawFinalFundValue, expNormMeanVarEF.portWts, RiskFreeRate);     
    EFplotter(expectedWtsCVaREF, 'b')
    optinforatioplotter(expectedWtsCVaREF);
d228 1
a228 2
    global tcopfinalfundvalue;
    tcopfinalfundvalue = histSims.arithRawFinalFundValue;
d230 2
a231 6
    %% CVaR via fmincon
            
    fminconCVaREF = subc_fminconCVaREF(samplemonths, NumPorts,...
                tcopNormWtsCVaREF.portWts, tcopNormMeanVarEF.portReturns, RiskFreeRate);
            
    EFplotter(fminconCVaREF, 'k')
d233 39
a271 3
    title('CVaR Efficient Frontier - normal weights and genetic')         
    xlabel('Risk (3-yr. CVaR $ - start with $1B)')
    ylabel('Return (%)')
d273 1
a273 3
    optinforatioplotter(histNormWtsCVaREF);
    optinforatioplotter(unshistNormWtsCVaREF);
    optinforatioplotter(tcopNormWtsCVaREF);
d275 34
a308 5
    optinforatioplotter(fminconCVaREF);
    
    if expected == 1
        legend('Historical Raw EF', 'Unsmoothed Historical EF', 'Simulated tcopula EF',...
            'Expected Assumptions EF', 'fmincon EF', 'Optimal Information Ratio', 'Location', 'SouthEast')    
a309 5
        save(savefilename, 'historicalReturns6fact', 'unshistrawReturnsObj', 'expectedReturnsObj', 'tcoprawReturnsObj', ...
            'histNormMeanVarEF', 'unshistNormMeanVarEF', 'tcopNormMeanVarEF', 'expNormMeanVarEF', ...
            'histNormWtsCVaREF', 'unshistNormWtsCVaREF', 'tcopNormWtsCVaREF', 'expectedWtsCVaREF', 'fminconCVaREF')

    elseif expected == 0 
d312 1
a312 1
    
d316 2
a317 1

a318 2
    
    hold off
a319 3
    save(savesimulations,'histSims');
    
    %% write output to an excel file (different returns objects)
a320 7
    if windummy == 1
        writedata(savefilename, writefilename, starttimeperioddummy, endtimeperioddummy);
        
    end
    
    return
    
d360 1
a360 3
    if expected == 1
        EFplotter(expNormMeanVarEF, 'b')     
    end
d366 4
a369 10
    if expected == 1
        optsharpeplotter(expNormMeanVarEF);    
        
        legend('Historical Raw EF', 'Unsmoothed Historical EF', 'Expected Assumptions EF', ...% 'Simulated tcopula EF', ...
            'Optimal Sharpe Ratio', 'Location', 'SouthEast')
    elseif expected == 0
        legend('Historical Raw EF', 'Unsmoothed Historical EF', 'Simulated tcopula EF', ...
            'Optimal Sharpe Ratio', 'Location', 'SouthEast')
    end
    
a375 1
    
a591 1

a603 1

a615 1
 
a616 110

%{ 
Other otpimization algorithms and rebalancing (Mean Variance)

    %%
    pattsearchout = patternsearch_01(samplemonths, NumPorts, tcopNormWtsCVaREF.portWts, tcopNormMeanVarEF.portReturns);
    % plots pattern search output
    plot(pattsearchout{3} .* (12) * (3 * 1e9), pattsearchout{2} .* (12 * 100), '-bv','LineWidth',0.5,...
        'MarkerEdgeColor','k',...
        'MarkerFaceColor', 'y',...                    
        'MarkerSize',4) 
    
    simannealoutput = simulated_annealing_01(samplemonths, NumPorts, tcopNormWtsCVaREF.portWts);
    
    % plots simulated annealing output
    plot(simannealoutput{3} .* (12) * (3 * 1e9), simannealoutput{2} .* (12 * 100), '-bv','LineWidth',0.5,...
        'MarkerEdgeColor','k',...
        'MarkerFaceColor', 'y',...                    
        'MarkerSize',4) 
    
    annealweights = simannealoutput{1}
    
    %{
    genCVaREF = subc_geneticmeanCVaREF(tcoprawReturnsObj.SimAvgArithMoAvgRet, samplemonths, NumPorts, ...
                histSims.arithRawFinalFundValue, fminconCVaREF.portWts, ...
                fminconCVaREF.portReturns, RiskFreeRate);

    EFplotter(genCVaREF, 'y')
    %}
    
    %{    
    fmincontestout = fmincon_test(samplemonths, NumPorts, tcopNormWtsCVaREF.portWts, tcopNormMeanVarEF.portReturns);
    % plots fmincon output
    plot(fmincontestout{3} .* ((12) * 100), fmincontestout{2} .* (12 * 100), '-bo','LineWidth',0.5,...
        'MarkerEdgeColor','k',...
        'MarkerFaceColor', 'k',...                    
        'MarkerSize',4)           
    %}
    % tcopnormCVaRwts = tcopNormWtsCVaREF.portWts
    % minconweights = fmincontestout{1}
    
    %{
        fmincontestout2 = fmincon_test(samplemonths, NumPorts, histNormWtsCVaREF.portWts, histNormWtsCVaREF.portReturns);
    % plots fmincon output
    plot(fmincontestout2{3} .* ((12) * 100), fmincontestout2{2} .* (12 * 100), '-bd','LineWidth',0.5,...
        'MarkerEdgeColor','k',...
        'MarkerFaceColor', 'k',...                    
        'MarkerSize',4) 
    fmincontestout2{1}
    %}

        %% mean-variance EF with REBALANCING!!
        
    histNormMeanVarEF;
    % NormEFWithRebalancing(fundReturns, histNormMeanVarEF.portWts, histNormMeanVarEF.portReturns, histNormMeanVarEF.portSDs) 
    
    
    return
            
    save('G:\IWang\MATLAB\aaa_testsave.mat', 'historicalReturns6fact', 'histSims', ...
        'unshistrawReturnsObj', 'tcoprawReturnsObj', 'histNormMeanVarEF', ...
        'unshistNormMeanVarEF', 'tcopNormMeanVarEF', 'expNormMeanVarEF')  
    % save('G:\IWang\MATLAB\aaa_testsave.mat', 'historicalReturns6fact', 'histSims', 'unshistrawReturnsObj', 'tcoprawReturnsObj', 'histNormMeanVarEF', 'unshistNormMeanVarEF', 'tcopNormMeanVarEF', 'expNormMeanVarEF', '-append')
    
    
    %% CVaR EF via genetic algorithm
    
    
    genCVaREF = subc_geneticmeanCVaREF(tcoprawReturnsObj.SimAvgArithMoAvgRet, samplemonths, NumPorts, ...
                histSims.arithRawFinalFundValue, tcopNormMeanVarEF.portWts, ...
                tcopNormMeanVarEF.portReturns, RiskFreeRate);

    EFplotter(genCVaREF, 'g')
    
    
    % plots genetic CvaR using average monthly returns as linear constraint
    plot(genCVaREF.portCVaRs2 .* ((12) * 100), genCVaREF.portReturns2 .* (12 * 100), '-b^','LineWidth',0.5,...
        'MarkerEdgeColor','k',...
        'MarkerFaceColor', 'c',...                    
        'MarkerSize',4) 
    
    title('CVaR Efficient Frontier - normal weights and genetic')         
    xlabel('Risk (CVaR %)')
    ylabel('Return (%)')

    optinforatioplotter(histNormWtsCVaREF);
    optinforatioplotter(unshistNormWtsCVaREF);
    optinforatioplotter(tcopNormWtsCVaREF);
    optinforatioplotter(expectedWtsCVaREF); 
    optinforatioplotter(genCVaREF);
    
    legend('Historical Raw EF', 'Unsmoothed Historical EF', 'Simulated tcopula EF',...
    'Expected Assumptions EF', 'Genetic EF', 'Optimal Information Ratio', 'Location', 'SouthEast')    

    
    hold off
    toc
    save(savefilename, 'historicalReturns6fact', 'histSims',...
        'unshistrawReturnsObj', 'histNormMeanVarEF', 'unshistNormMeanVarEF', ...
        'tcopNormMeanVarEF', 'histNormWtsCVaREF', 'unshistNormWtsCVaREF', 'tcopNormWtsCVaREF', ...
        'genCVaREF', 'expNormMeanVarEF', 'expectedReturnsObj')

         %{
    save(savefilename, 'historicalReturns6fact', 'histSims',...
        'unshistrawReturnsObj', 'histNormMeanVarEF', 'unshistNormMeanVarEF', ...
        'tcopNormMeanVarEF', 'histNormWtsCVaREF', 'unshistNormWtsCVaREF', 'tcopNormWtsCVaREF', ...
        'genCVaREF', 'expNormMeanVarEF', 'expectedReturnsObj', 'tcoprawReturnsObj', '-append')
    %}

%}
@

