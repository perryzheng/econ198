head	1.3;
access;
symbols;
locks; strict;
comment	@// @;
expand	@b@;


1.3
date	2010.04.14.05.31.44;	author xz27;	state Exp;
branches;
next	1.2;

1.2
date	2010.04.13.20.03.13;	author xz27;	state Exp;
branches;
next	1.1;

1.1
date	2010.04.13.16.03.09;	author xz27;	state Exp;
branches;
next	;


desc
@@


1.3
log
@plots and graphs for poster and reformatting
@
text
@
classdef subc_givenweights_normalmeanvarEF < class_efficientfrontiers
    %***NumPorts***: number of portfolios along the efficient frontier (how many
    %dots, typically 24), each dot is a specific set of weights of
    %different funds (w1, w2, w3, ..., wn) and w1+...+wn = 1; it is a
    %specific allocation of the funds
    %***portSDs***: Standard deviation of each dot, NumPorts x 1 column
    %vector
    %***portReturns***: returns of each dot, NumPorts x 1 column vector
    %***portWts***: the specific weights of funds of each of the NumPorts
    %portfolios, a NumPorts x n matrix (where n as usual, stands for number
    %of funds), sum of each row sum up to 1 
    %***sharpeRatio***: sharpe ratio of each portfolio, NumPorts x 1 column
    %vector; slope of the line from the portfolio to the risk free rate on
    %the y-axis (or the returns axis). slope of two points, we want to find the
    %maximum tangent
    %***optSharpePt***: scalar that tells which portfolio has the maximum
    %sharpRatio 
    properties
        NumPorts
        portSDs
        portReturns       
        portWts
        
        sharpeRatio
        optSharpePt
        
        
    end
    
    methods        
        function normEF = subc_givenweights_normalmeanvarEF(inAvgReturns, NumPorts, CovarMatrix, RiskFreeRate, weights)
            normEF = normEF@@class_efficientfrontiers();         
            normEF.NumPorts = NumPorts;            
            NormEFOutput = calc_norm_EF_02(normEF, inAvgReturns, weights, CovarMatrix);            
            normEF.portReturns = NormEFOutput{1};
            normEF.portWts = NormEFOutput{2};
            normEF.portSDs = NormEFOutput{3};            
            % sharpecalc(normEF)                   
            % annual
            % TBill3Month = 0.03;
        end
        
        %%Uses MATLAB function portopt to find the returns, standard
        %%deviations, and weights of different funds in a portfolio
        %weights are numNormPorts by numAssetClasses matrix
        function y = calc_norm_EF_02(obj, returns, weights, covar) 
            %need to calculate portfolio return; 
           
            % .* and ' because we are putting in the entire matrix of
            % weights (instead of one set of weights at a time)
            portVar = weights .* (covar * weights')';
            NormEFPortRisk = (sum(portVar,2)); %monthly standard deviations 
            NormEFPortRisk = (NormEFPortRisk).^(.5);
            
            NormEFPortWts = weights; 
            NormEFPortReturn = weights * returns'; %monthly portfolio returns 
            y = {NormEFPortReturn, NormEFPortWts, NormEFPortRisk}; 
        end
              
    end
        
end
@


1.2
log
@*** empty log message ***
@
text
@d35 1
a35 1
            NormEFOutput = calc_norm_EF_01(normEF, inAvgReturns, weights, CovarMatrix);            
a41 4
            monthlyarithriskfreerate = RiskFreeRate/12;
            normEF.sharpeRatio = (normEF.portReturns - monthlyarithriskfreerate) ./ normEF.portSDs;
            maxsharpe = max(normEF.sharpeRatio);
            normEF.optSharpePt = find(normEF.sharpeRatio == maxsharpe);          
d47 1
a47 1
        function y = calc_norm_EF_01(obj, returns, weights, covar) 
d49 7
a55 2
            portVar = weights * (covar *weights');
            NormEFPortRisk = sqrt(sum(portVar)); %monthly standard deviations 
@


1.1
log
@*** empty log message ***
@
text
@d32 1
a32 1
        function normEF = subc_givenweights_normalmeanvarEF(inAvgReturns, NumPorts, CovarMatrix, RiskFreeRate)
d35 1
a35 1
            NormEFOutput = calc_norm_EF_01(normEF, inAvgReturns, NumPorts, CovarMatrix);            
d50 2
a51 1
        function y = calc_norm_EF_01(obj, returns, NumNormPorts, covar) 
a52 1
           
d54 3
a56 3
            portSD = sqrt(sum(var));
            
            returns 
@

