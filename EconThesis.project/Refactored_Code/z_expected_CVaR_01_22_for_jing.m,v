head	1.10;
access;
symbols;
locks; strict;
comment	@// @;
expand	@b@;


1.10
date	2010.04.16.22.00.32;	author idw3;	state Exp;
branches;
next	1.9;

1.9
date	2010.02.24.05.04.56;	author idw3;	state Exp;
branches;
next	1.8;

1.8
date	2010.02.21.21.54.10;	author idw3;	state Exp;
branches;
next	1.7;

1.7
date	2010.02.15.06.14.36;	author idw3;	state Exp;
branches;
next	1.6;

1.6
date	2010.02.11.04.42.41;	author idw3;	state Exp;
branches;
next	1.5;

1.5
date	2010.02.10.22.31.10;	author idw3;	state Exp;
branches;
next	1.4;

1.4
date	2010.02.10.03.15.13;	author idw3;	state Exp;
branches;
next	1.3;

1.3
date	2010.02.09.17.19.01;	author idw3;	state Exp;
branches;
next	1.2;

1.2
date	2010.01.31.19.54.10;	author idw3;	state Exp;
branches;
next	1.1;

1.1
date	2010.01.22.23.04.54;	author idw3;	state Exp;
branches;
next	;


desc
@@


1.10
log
@*** empty log message ***
@
text
@

function z_expected_CVaR_01_22_for_jing(samplemonths, alltimedummy, starttimeperioddummy, endtimeperioddummy, expected_dummy, lowp)

    if alltimedummy == 0
        main(samplemonths, alltimedummy, starttimeperioddummy, endtimeperioddummy, expected_dummy, lowp)
    end

end

function main(samplemonths, alltimedummy, starttimeperioddummy, endtimeperioddummy, expected_dummy, lowp)

    %samplemonths = 36;

    % savefilename = 'simulations_1_1.mat'
    % savefilename = 'simulations_1_2.mat'
    starttimeperioddummy = int2str(starttimeperioddummy);
    endtimeperioddummy = int2str(endtimeperioddummy);

    importdata = ['importdata_' starttimeperioddummy '_' endtimeperioddummy '.mat'];
    load(importdata)
    savefilename = ['simulations_' starttimeperioddummy '_' endtimeperioddummy '.mat'];
    load(savefilename)
    
    glob_tcopdrawReturns = histSims.tcopdrawRawReturns; % simulated returns
    numOfMonths = size(glob_tcopdrawReturns, 1);
    if samplemonths ~= numOfMonths % test to make sure everything is consistent
        'ERROR: entered month does not match simulations months!!!'
        samplemonths
        numOfMonths
        return
    end
    %exportresultsdata = ['exportresults_' starttimeperioddummy '_' endtimeperioddummy '.mat'];
    %load(exportresultsdata)
    
    outputfile = ['z_testweights_CVaR_' starttimeperioddummy '_' endtimeperioddummy '_' num2str(lowp) '.mat'];
    
    
    expectAnnReturn = expectReturn*12;
    
    % exportresultsdata = 'exportresults_1_1';
    % exportresultsdata = 'exportresults_1_2';

    if expected_dummy == 0
        RiskFreeRate = historicalReturns6fact.arithAnnAvg(7)
    elseif expected_dummy == 1
        RiskFreeRate = expectAnnReturn(7); % use expected annual cash return as the risk free rate
        % expectedReturnsObj = class_expectedreturns(expectReturn, expectSigma, expectCorr);
    end
    
    % weightnames = ['Unlevered', 'Levered', 'Current'];
    %{
        weights = [0.385	0.147	0.129	0.139	0.082	0.12	0
            0.454	0.173	0.152	0.164	0.096	0.141	-0.18
            0.454	0.129	0.18	0.024	0.133	0.108	-0.041];
    %}

   
    weightnames = {'vol 8%', 'Unlevered', 'vol 11%','vol 12%', 'vol 13%', 'vol 14%', 'vol 15%'};
   
    
    weights = [0.462536873	0.155752212	0.152212389	0.147492625	0.115634218	0.146312684	-0.179941003
0.539626352	0.181710914	0.177581121	0.17207473	0.134906588	0.170698132	-0.376597837
0.385447394	0.12979351	0.126843658	0.122910521	0.096361849	0.121927237	0.016715831
];

    NumPorts = size(weights, 1);

    colors = ['y', 'm', 'c', 'r', 'g', 'b', 'w', 'k', 'y', 'm', 'c', 'r', 'g', 'b', 'w', 'k']; 
    figure
    hold on
    for i = 1:NumPorts
        numpoints = 1;
        MVNormWtsCVaREF = subc_givenweightsCVaREF(samplemonths, ...
            numpoints, histSims.arithRawFinalFundValue, weights(i, :), RiskFreeRate, lowp);     
        EFplotter(MVNormWtsCVaREF, colors(i))
    end

    legend(weightnames, 'Location', 'SouthEast')
    hold off
    
    % re-run the object here for ALL weights, for ease of saving
    MVNormWtsCVaREF = subc_givenweightsCVaREF(samplemonths, ...
        NumPorts, histSims.arithRawFinalFundValue, weights, RiskFreeRate, lowp);     
    %EFplotter(MVNormWtsCVaREF, 'r')
    
    save(outputfile, 'MVNormWtsCVaREF');

    title('CVaR Efficient Frontier - normal MV weights')         
    xlabel('Risk (3-yr. CVaR $ - start with $1B)')
    ylabel('Return (%)')

end

@


1.9
log
@'given weights rebalancing works'
@
text
@d62 3
a64 7
    weights = [0.3000	0.1200	0.1000	0.1000	0.0600	0.0900	0.2200
0.4000	0.1500	0.1250	0.1250	0.0800	0.1200	0.0000
0.4200	0.1600	0.1400	0.1400	0.0800	0.1300	-0.0700
0.4600	0.1700	0.1500	0.1600	0.0900	0.1400	-0.1700
0.4900	0.1900	0.1700	0.1700	0.1000	0.1500	-0.2600
0.5300	0.2000	0.1800	0.1800	0.1000	0.1700	-0.3600
0.5700	0.2200	0.1900	0.1900	0.1100	0.1800	-0.4600
@


1.8
log
@'stress test stuff for jing'
@
text
@a12 1

d24 9
a32 1

@


1.7
log
@'create histogram for simulations given weights; rolling period (annual) almost complete'
@
text
@d55 7
a61 7
    weights = [0.3039	0.1044	0.0848	0.0000	0.1762	0.1083	0.2225
0.3909	0.1343	0.1091	0.0000	0.2266	0.1392	0.0000
0.4178	0.1435	0.1166	0.0000	0.2422	0.1489	-0.0690
0.4558	0.1566	0.1272	0.0000	0.2642	0.1624	-0.1662
0.4938	0.1696	0.1378	0.0000	0.2862	0.1759	-0.2634
0.5318	0.1827	0.1484	0.0000	0.3083	0.1895	-0.3605
0.5698	0.1957	0.1590	0.0000	0.3303	0.2030	-0.4577
d79 1
a79 1
    % re-run the boject here for ALL weights, for ease of saving
@


1.6
log
@*** empty log message ***
@
text
@d55 7
a61 6
    weights = [0.3243	0.1257	0.0900	0.0000	0.1540	0.0930	0.2130
0.4460	0.1728	0.1237	0.0000	0.2118	0.1279	-0.0821
0.4865	0.1885	0.1349	0.0000	0.2311	0.1395	-0.1805
0.5270	0.2042	0.1462	0.0000	0.2503	0.1511	-0.2789
0.5676	0.2199	0.1574	0.0000	0.2696	0.1628	-0.3772
0.6081	0.2356	0.1687	0.0000	0.2888	0.1744	-0.4756
@


1.5
log
@'finished CVaR for joing, 75%, 85%'
@
text
@d55 7
a61 7
    weights = [0.3029	0.1154	0.1011	0.1090	0.0643	0.0943	0.2130
        0.3849	0.1466	0.1285	0.1385	0.0817	0.1198	0.0000
        0.4165	0.1587	0.1391	0.1499	0.0884	0.1296	-0.0821
        0.4543	0.1731	0.1517	0.1635	0.0965	0.1414	-0.1805
        0.4922	0.1875	0.1644	0.1772	0.1045	0.1532	-0.2789
        0.5300	0.2019	0.1770	0.1908	0.1125	0.1649	-0.3772
        0.5679	0.2164	0.1896	0.2044	0.1206	0.1767	-0.4756];
@


1.4
log
@'lowp for cvar calculations now global and an input'
@
text
@d3 1
a3 1
function z_expected_CVaR_01_22_for_jing(samplemonths, lowp, alltimedummy, starttimeperioddummy, endtimeperioddummy, expected_dummy)
d6 1
a6 1
        main(samplemonths, lowp, alltimedummy, starttimeperioddummy, endtimeperioddummy, expected_dummy)
d11 1
a11 1
function main(samplemonths, lowp, alltimedummy, starttimeperioddummy, endtimeperioddummy, expected_dummy)
d29 1
a29 1
    outputfile = ['z_testweights_CVaR_' starttimeperioddummy '_' endtimeperioddummy '.mat'];
@


1.3
log
@'updated z_cvar, test weights for jing'
@
text
@d3 1
a3 1
function z_expected_CVaR_01_22_for_jing(samplemonths, alltimedummy, starttimeperioddummy, endtimeperioddummy, expected_dummy)
d6 1
a6 1
        main(samplemonths, alltimedummy, starttimeperioddummy, endtimeperioddummy, expected_dummy)
d11 1
a11 1
function main(samplemonths, alltimedummy, starttimeperioddummy, endtimeperioddummy, expected_dummy)
d52 1
a52 1
    weightnames = {'Unlevered', 'vol 11%','vol 12%', 'vol 13%', 'vol 14%', 'vol 15%'};
d55 2
a56 1
    weights = [0.3849	0.1466	0.1285	0.1385	0.0817	0.1198	0.0000
d71 1
a71 1
            numpoints, histSims.arithRawFinalFundValue, weights(i, :), RiskFreeRate);     
d80 1
a80 1
        NumPorts, histSims.arithRawFinalFundValue, weights, RiskFreeRate);     
@


1.2
log
@"added code for calculating stuff for Jing's weights (expected): z_expected_CVaR .m and expected weights -CVaR .xls"
@
text
@a1 1
samplemonths = 36;
d3 1
a3 2
savefilename = 'simulations_1_1.mat'
% savefilename = 'simulations_1_2.mat'
d5 82
d88 1
a88 1
load(savefilename)
a89 27
exportresultsdata = 'exportresults_1_1';

% exportresultsdata = 'exportresults_1_2';

load(exportresultsdata)

RiskFreeRate = historicalReturns6fact.arithAnnAvg(7)

weightnames = ['Unlevered', 'Levered', 'Current'];
weights = [0.385	0.147	0.129	0.139	0.082	0.12	0
0.454	0.173	0.152	0.164	0.096	0.141	-0.18
0.454	0.129	0.18	0.024	0.133	0.108	-0.041];

NumPorts = size(weights, 1);

MVNormWtsCVaREF = subc_givenweightsCVaREF(samplemonths, ...
    NumPorts, histSims.arithRawFinalFundValue, weights, RiskFreeRate);     
EFplotter(MVNormWtsCVaREF, 'r')


title('CVaR Efficient Frontier - normal MV weights')         
xlabel('Risk (3-yr. CVaR $ - start with $1B)')
ylabel('Return (%)')
        
        
        
        @


1.1
log
@"added a script z_expected_CVaR_... to calculate the CVaR for some weights Jing ran MV on"
@
text
@d4 2
a5 2
% savefilename = 'simulations_1_1.mat'
savefilename = 'simulations_1_2.mat'
d10 3
a12 1
% exportresults = 'exportresults_1_1';
a13 1
exportresultsdata = 'exportresults_1_2';
@

