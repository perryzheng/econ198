head	1.2;
access;
symbols;
locks; strict;
comment	@# @;
expand	@b@;


1.2
date	2010.02.01.22.49.45;	author xz27;	state Exp;
branches;
next	1.1;

1.1
date	2010.02.01.04.18.13;	author xz27;	state Exp;
branches;
next	;


desc
@@


1.2
log
@More rebalancing for CVaR
@
text
@%main function for rebalancing in mean-variance framework

%histreturns: numofmonths by numoffunds historical returns matrix
%weights: numofportfoliopoints by numoffunds mean variance weights matrix with
%each row corresponding to each portfolio
%portreturns: numofportfoliopoints by 1 column vector indicating returns
%for each portfolio
%port_variance: numofportfoliopoints by 1 column vector indicating
%portfolio variance for each portfolio
function y = CVaREFWithRebalancing(returnconstraint, startweights) 
	%take each portreturn level, we return the weights that would minimize
	%CVaR, with the constraint that rebalancing at the end of each end
	%period that the final return annually should be at least that return
	%level.
    %This is done for a SINGLE weight
    global glob_EFconstraints;
    global glob_returnconstraint;
    
    glob_returnconstraint = returnconstraint;
    
    NumofFunds = size(startweights, 2);     
    ConSet = glob_EFconstraints.ConSet;
    A = ConSet(:, 1:NumofFunds);
    b = ConSet(:, (NumofFunds + 1));
    
    %{
	lb = zeros(1,numoffunds);
	ub = ones(1,numoffunds);
	aeq = ones(1,numoffunds);
	beq = 1; 
    %}
    
    options = optimset('algorithm','active-set', 'tolfun', 1e-19, 'tolcon', 1e-19, ...
        'tolx', 1e-19, 'maxfunevals', 1000, 'maxiter', 2500, 'useparallel', 'always');
    
    %The idea here is for each return level r_0 apply vecotr w to
    %each of 5000 simulations and calculate the return. At the end
    %we have a vector of 5000 final returns, calculates CVaR from
    %these 5000 returns. Worst of the 5% of 5000 250 returns
    %Calculate that CVaR call it CVaR bar
    global glob_pr;
    
    [weights,lowest_CVaR, exitflag] = fmincon(@@calcCVaRWithRebalancing, startweights, A, b, ...
    [], [], [], [], @@CVaRConstraintWithRebalancing, options);
   
end

      
@


1.1
log
@rebalancing with CVaR
@
text
@d16 4
a19 7
    global globalsamplemonths;
    global globalEFconstraints;
    global globalreturnconstraint;
    
    globalreturnconstraint = returnconstraint;
    rebalancemonth = 12;
    numofrebalancingperiods = floor(globalsamplemonths/rebalancemonth);
d22 1
a22 1
    ConSet = globalEFconstraints.ConSet;
a41 1
    tic
d44 2
a45 3
    [], [], [], [], @@CVaRConstraint, options);
    
    toc 
@

