head	1.4;
access;
symbols;
locks; strict;
comment	@// @;
expand	@b@;


1.4
date	2010.01.27.02.55.37;	author xz27;	state Exp;
branches;
next	1.3;

1.3
date	2010.01.19.17.05.05;	author idw3;	state Exp;
branches;
next	1.2;

1.2
date	2010.01.14.03.34.04;	author xz27;	state Exp;
branches;
next	1.1;

1.1
date	2009.12.17.20.48.23;	author xz27;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Comments on subc_givenweightsCVaREF.m and sub_normalmeanvarEF.m
@
text
@
classdef subc_normalmeanvarEF < class_efficientfrontiers
    %***NumPorts***: number of portfolios along the efficient frontier (how many
    %dots, typically 24), each dot is a specific set of weights of
    %different funds (w1, w2, w3, ..., wn) and w1+...+wn = 1; it is a
    %specific allocation of the funds
    %***portSDs***: Standard deviation of each dot, NumPorts x 1 column
    %vector
    %***portReturns***: returns of each dot, NumPorts x 1 column vector
    %***portWts***: the specific weights of funds of each of the NumPorts
    %portfolios, a NumPorts x n matrix (where n as usual, stands for number
    %of funds), sum of each row sum up to 1 
    %***sharpeRatio***: sharpe ratio of each portfolio, NumPorts x 1 column
    %vector; slope of the line from the portfolio to the risk free rate on
    %the y-axis (or the returns axis). slope of two points, we want to find the
    %maximum tangent
    %***optSharpePt***: scalar that tells which portfolio has the maximum
    %sharpRatio 
    properties
        NumPorts
        portSDs
        portReturns       
        portWts
        
        sharpeRatio
        optSharpePt
        
        
    end
    
    methods        
        function normEF = subc_normalmeanvarEF(inAvgReturns, NumPorts, CovarMatrix, RiskFreeRate)
            normEF = normEF@@class_efficientfrontiers();         
            normEF.NumPorts = NumPorts;            
            NormEFOutput = calc_norm_EF_01(normEF, inAvgReturns, NumPorts, CovarMatrix);            
            normEF.portReturns = NormEFOutput{1};
            normEF.portWts = NormEFOutput{2};
            normEF.portSDs = NormEFOutput{3};            
            % sharpecalc(normEF)                   
            % annual
            % TBill3Month = 0.03;
            monthlyarithriskfreerate = RiskFreeRate/12;
            normEF.sharpeRatio = (normEF.portReturns - monthlyarithriskfreerate) ./ normEF.portSDs;
            maxsharpe = max(normEF.sharpeRatio);
            normEF.optSharpePt = find(normEF.sharpeRatio == maxsharpe);          
        end
        
        %%Uses MATLAB function portopt to find the returns, standard
        %%deviations, and weights of different funds in a portfolio
        function y = calc_norm_EF_01(obj, returns, NumNormPorts, covar)   
            %CalcCovariance = cov(fundReturns)
            global globalEFconstraints;
            ConSet = globalEFconstraints.ConSet;
            [NormEFPortRisk, NormEFPortReturn, NormEFPortWts] = portopt(returns, covar,...    
            NumNormPorts, [], ConSet);
            y = {NormEFPortReturn, NormEFPortWts, NormEFPortRisk}; 
        end
              
    end
        
end
@


1.3
log
@"fixed errors in class_simulations; added obj to methods in subc_ ... EF"
@
text
@d3 16
d33 3
a35 6
            normEF = normEF@@class_efficientfrontiers();
            
            normEF.NumPorts = NumPorts;
            
            NormEFOutput = calc_norm_EF_01(normEF, inAvgReturns, NumPorts, CovarMatrix);
            
d38 2
a39 4
            normEF.portSDs = NormEFOutput{3};
            
            % sharpecalc(normEF)
                     
a43 2


d45 1
a45 4

            normEF.optSharpePt = find(normEF.sharpeRatio == maxsharpe);

            
d48 2
a50 1

a51 2


a53 1

a55 2


a56 2


@


1.2
log
@Refactor (simply put all the necessary methods there) naively all the subclasses of efficient_frontier class.
@
text
@d21 1
a21 1
            NormEFOutput = calc_norm_EF_01(inAvgReturns, NumPorts, CovarMatrix);
d42 1
a42 1
        function y = calc_norm_EF_01(returns, NumNormPorts, covar)   
@


1.1
log
@Add subc_fminconCVaREF, subc_givenweightsCVaREF, subc_givenweightsCVaREF and subc_normalmeanvarEF and @@class_efficientfrontier
@
text
@d15 1
a15 2
    methods
        
d41 2
a42 2
        
	function y = calc_norm_EF_01(returns, NumNormPorts, covar)   
d44 1
a44 1
	    %CalcCovariance = cov(fundReturns)
a45 27
	    
	    global globalEFconstraints;
	    ConSet = globalEFconstraints.ConSet;

	    [NormEFPortRisk, NormEFPortReturn, NormEFPortWts] = portopt(returns, covar,...    
		NumNormPorts, [], ConSet);
	    
	    
	    y = {NormEFPortReturn, NormEFPortWts, NormEFPortRisk}; 
	    

	    % [NormEFPortRisk, NormEFPortReturn, NormEFPortWts] = frontcon(returns, covar, NumNormPorts);
	    
	    
	    % plots efficient frontier, risk vs return
	    % figure
	    
	    
	    %{
	    plot(NormEFPortRisk, NormEFPortReturn, '-bo','LineWidth',0.5,...
		            'MarkerEdgeColor','k',...
		            'MarkerFaceColor', plotcolor,...
		            'MarkerSize',3)

	    title('Normal Mean Vairance Efficient Frontier')         
	    xlabel('Risk (Standard Deviation %)')
	    ylabel('Return (%)')
d47 2
a48 2
	    %}
	    
d50 2
a51 7
	end
        

                 
    end
        
end
a52 4
%{
        function sharpecalc(normEF)
            TBill3Month = 0;
            normEF.sharpeRatio = (normEF.portReturns - TBill3Month) ./ normEF.portSDs;
d54 1
a55 5
            % '2.97 + 1.239740378*x'
            maxsharpe = max(sharpeRatio);
            %dum = size(sharpeRatio)
            %[MSrow, MScol] = ind2sub(sharpeRatio, [maxsharpe])
            normEF.optSharpePt = find(sharpeRatio == maxsharpe);
d58 4
a61 1
%}
@

