head	1.1;
access;
symbols;
locks; strict;
comment	@# @;
expand	@b@;


1.1
date	2010.01.27.02.55.38;	author xz27;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Comments on subc_givenweightsCVaREF.m and sub_normalmeanvarEF.m
@
text
@
classdef subc_normalmeanvarEF < class_efficientfrontiers
    %***NumPorts***: number of portfolios along the efficient frontier (how many
    %dots, typically 24), each dot is a specific set of weights of
    %different funds (w1, w2, w3, ..., wn) and w1+...+wn = 1; it is a
    %specific allocation of the funds
    %***portSDs***: Standard deviation of each dot, NumPorts x 1 column
    %vector
    %***portReturns***: returns of each dot, NumPorts x 1 column vector
    %***portWts***: the specific weights of funds of each of the NumPorts
    %portfolios, a NumPorts x n matrix (where n as usual, stands for number
    %of funds), sum of each row sum up to 1 
    %***sharpeRatio***: sharpe ratio of each portfolio, NumPorts x 1 column
    %vector; slope of the line from the portfolio to the risk free rate on
    %the y-axis (or the returns axis). slope of two points, we want to find the
    %maximum tangent
    %***optSharpePt***: scalar that tells which portfolio has the maximum
    %sharpRatio 
    properties
        NumPorts
        portSDs
        portReturns       
        portWts
        
        sharpeRatio
        optSharpePt
        
        
    end
    
    methods        
        function normEF = subc_normalmeanvarEF(inAvgReturns, NumPorts, CovarMatrix, RiskFreeRate)
            normEF = normEF@@class_efficientfrontiers();
            
            normEF.NumPorts = NumPorts;
            
            NormEFOutput = calc_norm_EF_01(normEF, inAvgReturns, NumPorts, CovarMatrix);
            
            normEF.portReturns = NormEFOutput{1};
            normEF.portWts = NormEFOutput{2};
            normEF.portSDs = NormEFOutput{3};
            
            % sharpecalc(normEF)
                     
            % annual
            % TBill3Month = 0.03;
            monthlyarithriskfreerate = RiskFreeRate/12;
            normEF.sharpeRatio = (normEF.portReturns - monthlyarithriskfreerate) ./ normEF.portSDs;


            maxsharpe = max(normEF.sharpeRatio);

            normEF.optSharpePt = find(normEF.sharpeRatio == maxsharpe);

            
        end
        
        %%
        
        function y = calc_norm_EF_01(obj, returns, NumNormPorts, covar)   

            %CalcCovariance = cov(fundReturns)


            global globalEFconstraints;
            ConSet = globalEFconstraints.ConSet;

            [NormEFPortRisk, NormEFPortReturn, NormEFPortWts] = portopt(returns, covar,...    
            NumNormPorts, [], ConSet);


            y = {NormEFPortReturn, NormEFPortWts, NormEFPortRisk}; 


        end
              
    end
        
end
@
