head	1.7;
access;
symbols;
locks; strict;
comment	@// @;
expand	@b@;


1.7
date	2010.04.10.15.45.01;	author xz27;	state Exp;
branches;
next	1.6;

1.6
date	2010.04.10.14.13.42;	author idw3;	state Exp;
branches;
next	1.5;

1.5
date	2010.02.10.03.15.27;	author idw3;	state Exp;
branches;
next	1.4;

1.4
date	2010.01.27.02.55.37;	author xz27;	state Exp;
branches;
next	1.3;

1.3
date	2010.01.20.07.13.08;	author idw3;	state Exp;
branches;
next	1.2;

1.2
date	2010.01.19.17.05.05;	author idw3;	state Exp;
branches;
next	1.1;

1.1
date	2009.12.17.20.48.23;	author xz27;	state Exp;
branches;
next	;


desc
@@


1.7
log
@EFplotter working - everything else needs to be fixed
@
text
@
classdef subc_givenweightsCVaREF < class_efficientfrontiers
    %***NumPorts***: number of portfolios along the efficient frontier (how many
    %dots, typically 24), each dot is a specific set of weights of
    %different funds (w1, w2, w3, ..., wn) and w1+...+wn = 1; it is a
    %specific allocation of the funds
    %***portCVaRs***: CVaR of each dot, NumPorts x 1 column
    %vector
    %***portReturns***: returns of each dot, NumPorts x 1 column vector
    %***portWts***: the specific weights of funds of each of the NumPorts
    %portfolios, a NumPorts x n matrix (where n as usual, stands for number
    %of funds), sum of each row sum up to 1 
    %***sharpeRatio***: sharpe ratio of each portfolio, NumPorts x 1 column
    %vector; slope of the line from the portfolio to the risk free rate on
    %the y-axis (or the returns axis). slope of two points, we want to find the
    %maximum tangent
    %***optSharpePt***: scalar that tells which portfolio has the maximum
    %sharpRatio 
    properties
        NumPorts
        portCVaRs
        portReturns       
        portWts
        
        sharpeRatio
        optSharpePt
    end

    methods
        function givenweightscvar = subc_givenweightsCVaREF(samplemonths, ...
            NumPorts, finalfundvalue, givenweights, RiskFreeRate, lowp)            
            givenweightscvar = givenweightscvar@@class_efficientfrontiers();
            givenweightscvar.NumPorts = NumPorts;            

            histCVaREF = CVaR_EF_normal_01(givenweightscvar, samplemonths, NumPorts, finalfundvalue, givenweights, lowp);
            givenweightscvar.portWts = histCVaREF{1};
            givenweightscvar.portReturns = histCVaREF{2};
            givenweightscvar.portCVaRs = histCVaREF{3};

            monthlyarithriskfreerate = RiskFreeRate/12;
            givenweightscvar.sharpeRatio = (givenweightscvar.portReturns - monthlyarithriskfreerate) ./ givenweightscvar.portCVaRs;

            maxsharpe = max(givenweightscvar.sharpeRatio);

            givenweightscvar.optSharpePt = find(givenweightscvar.sharpeRatio == maxsharpe);

        end

        % calculates CVaR EF GIVEN portfolio weights and returns
        function y = CVaR_EF_normal_01(obj, samplemonths, numEFportfolios, tcopfinalfundvalue, NormEFPortWts, lowp)
            % get CVaRs for normal mean variance EF weights

            totalsimulations = size(tcopfinalfundvalue, 3);
            NumofFunds = size(tcopfinalfundvalue, 2);
            tcopTotalRuns = size(tcopfinalfundvalue, 1);

            numtimeperiods = samplemonths;
            periodspertime = 12;
            %lowp = 0.05;

            EFnormCVaR = zeros(numEFportfolios, 1);
            EFnormMoCVaR = zeros(numEFportfolios, 1);
            EFnormMoReturns = zeros(numEFportfolios, 1);
            EFnormReturns = zeros(numEFportfolios, 1); %actually the final fund value 

            % For each of the portfolio, apply the weight generated form the mean-variance framework to the NumGDPDraw simulations
            % tempEFfinalvalue is a NumGDPDraw by 1
            for i = 1:numEFportfolios
                tempEFweight = NormEFPortWts(i,:)';
                tempEFfinalvalue = portweightfinalvalue(tcopfinalfundvalue, tempEFweight);

                % ARITHMETIC ANNUAL RETURN
                EFnormReturns(i, 1) = (mean(tempEFfinalvalue,1)); %(mean(tempEFfinalvalue, 1) - 1)% / (samplemonths/12);

                % ARITHMETIC Monthly RETURN
                EFnormMoReturns(i, 1) = (mean(tempEFfinalvalue, 1)); %(mean(tempEFfinalvalue, 1) - 1)% / (samplemonths/1);

                % Geometric
                % EFnormReturns(i, 1) = mean(tempEFfinalvalue)^(1/(numtimeperiods/periodspertime)) - 1;

                % ANNUAL CVaR
                EFnormCVaR(i, 1) = calcCVar95_01(obj, tempEFfinalvalue, lowp) ; %/ (samplemonths/12);
                %at this point, EFnormCVaR is final fund value of the worst
                %5% cases 
                % EFnormMoCVaR(i, 1) = calcCVar95_01(tempEFfinalvalue, lowp) / (samplemonths/1); %/ (samplemonths/12);
            end

            EFnormCVaR;
            startingvalue = 1;

            normCVaR = -EFnormCVaR; %- startingvalue);
            normMoCVaR = normCVaR; % / (samplemonths/1);

            y = {NormEFPortWts, EFnormMoReturns, normMoCVaR};
        end
    
        % Given the a set of weights of the funds
        
        
        % calculates the CVar## of a set of return data
        % returns must be in column form
        % different columns = different funds' returns
        % Find the lowest lowp percent average value 
        
        % simReturnData is a NumGPDDraws*tcopulaRuns by n matrix  
        % simReturnData is the NumOfSimulations by n matrix since
        % tcopulaRuns is usually 1

        function y = calcCVar95_01(obj, simReturnData, lowp)
            numFunds = size(simReturnData, 2);
            CVar = zeros(1, numFunds); % pre allocate
            % to calculate CVaR: sort from lowest to highest return
            % then take average of lowest 5% (x%)
            sortedreturns = sort(simReturnData);
            for i = 1:numFunds
                numReturns = size(simReturnData(:, i), 1);
                lowestpbarrier = lowp * numReturns;
                lowestprounded = ceil(lowestpbarrier);
                lowestptile = sum(sortedreturns(1:lowestprounded, i));
                CVar(1, i) = sum(lowestptile) / lowestprounded;
            end
            y = CVar;
        end

    end

end
@


1.6
log
@*** empty log message ***
@
text
@d64 1
a64 1
            EFnormReturns = zeros(numEFportfolios, 1);
d73 1
a73 1
                EFnormReturns(i, 1) = (mean(tempEFfinalvalue, 1) - 1)% / (samplemonths/12);
d76 1
a76 1
                EFnormMoReturns(i, 1) = (mean(tempEFfinalvalue, 1) - 1)% / (samplemonths/1);
d83 2
d91 2
a92 2
            normCVaR = -(EFnormCVaR - startingvalue);
            normMoCVaR = normCVaR% / (samplemonths/1);
@


1.5
log
@'lowp for cvar calculations now global and an input'
@
text
@d73 1
a73 1
                EFnormReturns(i, 1) = (mean(tempEFfinalvalue, 1) - 1) / (samplemonths/12);
d76 1
a76 1
                EFnormMoReturns(i, 1) = (mean(tempEFfinalvalue, 1) - 1) / (samplemonths/1);
d90 1
a90 1
            normMoCVaR = normCVaR / (samplemonths/1);
@


1.4
log
@Comments on subc_givenweightsCVaREF.m and sub_normalmeanvarEF.m
@
text
@d31 1
a31 1
            NumPorts, finalfundvalue, givenweights, RiskFreeRate)            
d35 1
a35 1
            histCVaREF = CVaR_EF_normal_01(givenweightscvar, samplemonths, NumPorts, finalfundvalue, givenweights);
d50 1
a50 1
        function y = CVaR_EF_normal_01(obj, samplemonths, numEFportfolios, tcopfinalfundvalue, NormEFPortWts)
d59 1
a59 1
            lowp = 0.05;
@


1.3
log
@"Refactored code works"
@
text
@d3 16
d31 1
a31 2
            NumPorts, finalfundvalue, givenweights, RiskFreeRate)
            
d66 2
d95 3
d101 5
a105 3

        % simReturnData is a m x n matrix
        % m return periods, n funds
@


1.2
log
@"fixed errors in class_simulations; added obj to methods in subc_ ... EF"
@
text
@d12 1
a12 1
    
d15 1
a15 1
                NumPorts, finalfundvalue, givenweights, RiskFreeRate)
d24 1
a24 1
            
a30 43
            
        end

	% calculates CVaR EF GIVEN portfolio weights and returns
	function y = CVaR_EF_normal_01(obj, samplemonths, numEFportfolios, tcopfinalfundvalue, NormEFPortWts)
	    % get CVaRs for normal mean variance EF weights
	    
	    totalsimulations = size(tcopfinalfundvalue, 3);
	    NumofFunds = size(tcopfinalfundvalue, 2);
	    tcopTotalRuns = size(tcopfinalfundvalue, 1);

	    numtimeperiods = samplemonths;
	    periodspertime = 12;
	    lowp = 0.05;
	    
	    EFnormCVaR = zeros(numEFportfolios, 1);
	    EFnormMoCVaR = zeros(numEFportfolios, 1);
	    EFnormMoReturns = zeros(numEFportfolios, 1);
	    EFnormReturns = zeros(numEFportfolios, 1);
	    for i = 1:numEFportfolios
		tempEFweight = NormEFPortWts(i,:)';
		tempEFfinalvalue = portweightfinalvalue(tcopfinalfundvalue, tempEFweight);
		
		% ARITHMETIC ANNUAL RETURN
		EFnormReturns(i, 1) = (mean(tempEFfinalvalue, 1) - 1) / (samplemonths/12);
		
		% ARITHMETIC Monthly RETURN
		EFnormMoReturns(i, 1) = (mean(tempEFfinalvalue, 1) - 1) / (samplemonths/1);
		
		% Geometric
		% EFnormReturns(i, 1) = mean(tempEFfinalvalue)^(1/(numtimeperiods/periodspertime)) - 1;
		
		% ANNUAL CVaR
		EFnormCVaR(i, 1) = calcCVar95_01(tempEFfinalvalue, lowp) ; %/ (samplemonths/12);
		% EFnormMoCVaR(i, 1) = calcCVar95_01(tempEFfinalvalue, lowp) / (samplemonths/1); %/ (samplemonths/12);
	    end
	    
	    EFnormCVaR;
	    
	    startingvalue = 1;
	    
	    normCVaR = -(EFnormCVaR - startingvalue);
	    normMoCVaR = normCVaR / (samplemonths/1);
d32 68
a99 1
	    y = {NormEFPortWts, EFnormMoReturns, normMoCVaR};
a100 2
	end
                
d102 2
a103 3
    
    
end
@


1.1
log
@Add subc_fminconCVaREF, subc_givenweightsCVaREF, subc_givenweightsCVaREF and subc_normalmeanvarEF and @@class_efficientfrontier
@
text
@d20 1
a20 1
            histCVaREF = CVaR_EF_normal_01(samplemonths, NumPorts, finalfundvalue, givenweights);
d35 1
a35 1
	function y = CVaR_EF_normal_01(samplemonths, numEFportfolios, tcopfinalfundvalue, NormEFPortWts)
@

