head	1.7;
access;
symbols;
locks; strict;
comment	@// @;
expand	@b@;


1.7
date	2010.03.28.16.36.08;	author idw3;	state Exp;
branches;
next	1.6;

1.6
date	2010.02.24.06.13.42;	author idw3;	state Exp;
branches;
next	1.5;

1.5
date	2010.02.22.01.15.39;	author xz27;	state Exp;
branches;
next	1.4;

1.4
date	2010.02.22.00.55.05;	author xz27;	state Exp;
branches;
next	1.3;

1.3
date	2010.02.22.00.00.19;	author xz27;	state Exp;
branches;
next	1.2;

1.2
date	2010.02.21.23.36.31;	author xz27;	state Exp;
branches;
next	1.1;

1.1
date	2010.02.21.23.18.00;	author xz27;	state Exp;
branches;
next	;


desc
@@


1.7
log
@added references; draft 03-28-10 sent to rasiel
@
text
@
classdef subc_compoundingGivenWeights < class_efficientfrontiers
    %***NumPorts***: number of portfolios along the efficient frontier (how many
    %dots, typically 24), each dot is a specific set of weights of
    %different funds (w1, w2, w3, ..., wn) and w1+...+wn = 1; it is a
    %specific allocation of the funds
    %***portSDs***: Standard deviation of each dot, NumPorts x 1 column
    %vector
    %***portReturns***: returns of each dot, NumPorts x 1 column vector
    %***portWts***: the specific weights of funds of each of the NumPorts
    %portfolios, a NumPorts x n matrix (where n as usual, stands for number
    %of funds), sum of each row sum up to 1 
    %***sharpeRatio***: sharpe ratio of each portfolio, NumPorts x 1 column
    %vector; slope of the line from the portfolio to the risk free rate on
    %the y-axis (or the returns axis). slope of two points, we want to find the
    %maximum tangent
    %***optSharpePt***: scalar that tells which portfolio has the maximum
    %sharpRatio 
    properties
        NumPorts
        portCVaRs
        portReturns       
        portWts        
        
        sharpeRatio
        optSharpePt
    end
    
    methods
        function compounding = subc_compoundingGivenWeights(weights, samplemonths, NumPorts,...
                RiskFreeRate, compound_dummy)
            for i=1:NumPorts
                compounding.portReturns(i,:) = compound_return(compounding,weights(i,:));
                compounding.portCVaRs(i,:) = compound_CVaR(compounding,weights(i,:));
            end
            
            compounding.portWts = weights;
            compounding.NumPorts = NumPorts;

            monthlyarithriskfreerate = RiskFreeRate/12;
            compounding.sharpeRatio = (compounding.portReturns - monthlyarithriskfreerate) ./ compounding.portCVaRs;

            maxsharpe = max(compounding.sharpeRatio);

            compounding.optSharpePt = find(compounding.sharpeRatio == maxsharpe);
        end
        
        
        %%compounding CVaR - x-value
        function y = compound_CVaR(obj, portWeights)
            %***glob_tcopdrawReturns***: a m by n by numGDPDraws matrix
                % The idea here is to use calcVaRWithRelancingHelper for each sheet
                % Each sheet represents a m by n matrix, we calculate the final
                % portfolio value of the sheet

                %May need to change this to simulation returns
                global glob_tcopdrawReturns;
                global compoundmonth; 
                
                numOfMonths = size(glob_tcopdrawReturns,1);
                numOfFunds = size(glob_tcopdrawReturns,2);
                numOfSims = size(glob_tcopdrawReturns,3);
                simReturnData = zeros(numOfSims, 1);

                numPeriods = floor(numOfMonths/compoundmonth);

                for i=1:numOfSims
                    oneSimReturns = glob_tcopdrawReturns(:,:,i);
                    y = compound_CVaR_Helper(obj, portWeights,oneSimReturns,compoundmonth);
                    finalValue = y{2}; % a scalar indicating final portfolio value
                    simReturnData(i,1) = finalValue;
                end

                lowp = 0.05;
                % attempt to vectorize, each row is a different weight, calcCVaR gives
                % results in each column
                simReturnData;
                simReturnData = (simReturnData.^(1/numPeriods) - 1)/compoundmonth; 
                y = - (calcCVar95_01(simReturnData, lowp)');
        end
        

        % ARITHMETICALLY CALCULATED PERIOD RETURNS, compounded periodically 

        %***portWeight***: a 1 by numOfFunds row vector, indicating weights of that
        %portfolio 
        %***oneSimReturns***: a numMonths by numOfFunds matrix
        %***compoundmonth***: a fixed constant indicating how many months one
        %should rebalance Output: 
        function y = compound_CVaR_Helper(obj, portWeight, oneSimReturns, compoundmonth)
            % Convert would convert portWeight to column vector 
            sampleMonths = size(oneSimReturns,1);
            numOfFunds = size(oneSimReturns, 2);

            if size(portWeight, 2) == 1
                %Assume the portWeight is a vector. Then if the number of columns 
                %is one, which means it's a column vector, then make it a row
                %vector
                portWeight = portWeight';
            end

            proceed = 1;

            if proceed == 1  

                startMoney = 1;

                numOfTrials = floor(sampleMonths/compoundmonth);
                balancedportValue = zeros(numOfTrials + 1, numOfFunds);    
                %Start the fortfolio by putting the startMoney among the
                %asset classes according to portfolio weights
                balancedportValue(1, :) = startMoney.*portWeight;
                %port_value_at_each_comp = zeros(numOfTrials,1);

                returnPlusOne = oneSimReturns;
                %At after each period we rebalance and redistribute the period
                %portfolio value by the portWeight row vector and we store that
                %in balancedportValue
                for i = 1:numOfTrials
                    periodreturn = sum(returnPlusOne((i-1)*compoundmonth +1 : i*compoundmonth, :), 1);

                    balancedportValue(i+1, :) = balancedportValue(i, :) .* (periodreturn+1); % compounds instead of arithmetic
                    %periodportVal = sum(balancedportValue(i+1, :), 2);
                    %port_value_at_each_comp(i,1) = periodportVal; %port_value_at_each_comp is the portfolio value at the end of each rebalancing period
                    %balancedportValue(i+1, :) = periodportVal * portWeight; 
                end

                finalvalues = balancedportValue(numOfTrials+1, :);
                finalportvalue = sum(finalvalues);
                y = {finalvalues, finalportvalue};
            end
        end
            
        %% compounding return calculation - y-value
        function y = compound_return(obj, portWeights) 
            %global glob_returnconstraint
            global glob_tcopdrawReturns;
            global compoundmonth;

            numOfMonths = size(glob_tcopdrawReturns,1);
            numOfFunds = size(glob_tcopdrawReturns,2);
            numOfSims = size(glob_tcopdrawReturns,3);

            numPeriods = floor(numOfMonths/compoundmonth);
            simReturnData = zeros(numOfSims, numOfFunds);

            for i=1:numOfSims
                oneSimReturns = glob_tcopdrawReturns(:,:,i);
                y = compound_nonlinconstr_Helper(obj,portWeights,oneSimReturns,compoundmonth);
                finalValues = y{1}; % a row vector of the final values
                simReturnData(i,:) = finalValues;
            end

            %Now need to convert each return in simReturnData to a monthly return
            %rate
            %mean outputs the average of the columns the result is a 1 by numFund matrix
            %sum simply sums them up
            finalValue = sum(mean(simReturnData,1));
            %From the final value, we deduce the monthly return
            empiricalReturn = (finalValue^(1/numPeriods) - 1)/compoundmonth; % MOnthly!

            y = empiricalReturn;
            %c = [];
            %ceq = (empiricalReturn - glob_returnconstraint);
        end            

        
        %%non-lin constraint helper%
        function y = compound_nonlinconstr_Helper(obj, portWeight, oneSimReturns, compoundmonth)
            % Convert would convert portWeight to column vector 
            sampleMonths = size(oneSimReturns,1);
            numOfFunds = size(oneSimReturns, 2);

            if size(portWeight, 2) == 1
                %Assume the portWeight is a vector. Then if the number of columns 
                %is one, which means it's a column vector, then make it a row
                %vector
                portWeight = portWeight';
            end

            proceed = 1;

            if proceed == 1  
                startMoney = 1;

                numOfTrials = floor(sampleMonths/compoundmonth);
                balancedportValue = zeros(numOfTrials + 1, numOfFunds);
                %Start the fortfolio by putting the startMoney among the
                %asset classes according to portfolio weights

                balancedportValue(1, :) = startMoney.*portWeight;
                %port_value_at_each_comp = zeros(numOfTrials,1);

                returnPlusOne = oneSimReturns;
                %At after each period we rebalance and redistribute the period
                %portfolio value by the portWeight row vector and we store that
                %in balancedportValue
                for i = 1:numOfTrials
                    periodreturn = sum(returnPlusOne((i-1)*compoundmonth +1 : i*compoundmonth, :), 1);

                    balancedportValue(i+1, :) = balancedportValue(i, :) .* (periodreturn+1); % compounds instead of arithmetic
                    %periodportVal = sum(balancedportValue(i+1, :), 2);
                    %port_value_at_each_comp(i,1) = periodportVal; %port_value_at_each_comp is the portfolio value at the end of each rebalancing period
                    %balancedportValue(i+1, :) = periodportVal * portWeight; 
                end

                finalvalues = balancedportValue(numOfTrials+1, :);
                finalportvalue = sum(finalvalues);
                y = {finalvalues, finalportvalue};
            end
        end % end of non-lin constraint helper
            
    end % end of methods
end % end of class@


1.6
log
@'now compounding/rebalancing is own figure; ran code all the way through once'
@
text
@d190 1
@


1.5
log
@*** empty log message ***
@
text
@d30 2
a31 2
        function compounding = subc_compoundingGivenWeights(weights,samplemonths, NumPorts,...
                startweights, returnconstraints, RiskFreeRate, compound_dummy)
@


1.4
log
@*** empty log message ***
@
text
@a32 1
                weights(i,:)
d69 1
a69 1
                    y = compound_CVaR_Helper(compounding, portWeights,oneSimReturns,compoundmonth);
d133 10
d144 24
d169 1
a169 1
        function y = compound_nonlinconstr_Helper(obj,portWeight, oneSimReturns, compoundmonth)
a181 5
            %for i=1:size(portWeight) 
            %    if(portWeight(i)<0 || portWeight(i)>1) 
            %        proceed = 0
            %    end
            %end
d187 1
a187 1
                balancedportValue = zeros(numOfTrials + 1, numOfFunds);    
a210 34
            
        %% compounding return calculation - y-value
        function y = compound_return(obj, portWeights) 
            %global glob_returnconstraint
            global glob_tcopdrawReturns;
            global compoundmonth;

            numOfMonths = size(glob_tcopdrawReturns,1);
            numOfFunds = size(glob_tcopdrawReturns,2);
            numOfSims = size(glob_tcopdrawReturns,3);

            numPeriods = floor(numOfMonths/compoundmonth);
            simReturnData = zeros(numOfSims, numOfFunds);

            for i=1:numOfSims
                oneSimReturns = glob_tcopdrawReturns(:,:,i);
                y = compound_nonlinconstr_Helper(obj,portWeights,oneSimReturns,compoundmonth);
                finalValues = y{1}; % a row vector of the final values
                simReturnData(i,:) = finalValues;
            end

            %Now need to convert each return in simReturnData to a monthly return
            %rate
            %mean outputs the average of the columns the result is a 1 by numFund matrix
            %sum simply sums them up
            finalValue = sum(mean(simReturnData,1));
            %From the final value, we deduce the monthly return
            empiricalReturn = (finalValue^(1/numPeriods) - 1)/compoundmonth; % MOnthly!

            y = empiricalReturn;
            %c = [];
            %ceq = (empiricalReturn - glob_returnconstraint);
        end            
            
@


1.3
log
@*** empty log message ***
@
text
@d32 6
a37 2
            compounding.portCVaRs = compound_CVaR(weights);
            compounding.portReturns = compound_return(weights);
d51 1
a51 1
        function y = compound_CVaR(portWeights)
d70 1
a70 1
                    y = compound_CVaR_Helper(portWeights,oneSimReturns,compoundmonth);
d91 1
a91 1
        function y = compound_CVaR_Helper(portWeight, oneSimReturns, compoundmonth)
d135 49
d185 1
a185 1
        function y = compound_return(portWeights) 
d188 1
d199 1
a199 1
                y = compound_nonlinconstr_Helper(portWeights,oneSimReturns,compoundmonth);
@


1.2
log
@*** empty log message ***
@
text
@d30 2
a31 1
        function compounding = subc_compoundingGivenWeights(weights)
d35 1
a35 1
            compounding.NumPorts = 0;
@


1.1
log
@*** empty log message ***
@
text
@d30 1
a30 1
        function compounding = subc_compoundingGivenWeights(weights, NumPorts)
d34 1
a34 1
            compounding.NumPorts = NumPorts;
@

